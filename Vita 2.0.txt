<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no">
    <title>Vita Integrare</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&family=Open+Sans:wght@300;400;600&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">
    <link rel="manifest" href="/manifest.json">
    <!-- CORREÇÃO: Apontando para icone.png para apple-touch-icon e favicon -->
    <link rel="apple-touch-icon" href="/icone.png">
    <link rel="icon" href="/icone.png">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="theme-color" content="#2563eb">
    <style>
        :root{--primary-blue:#2563eb;--dark-blue:#1d4ed8;--light-blue:#3b82f6;--sky-blue:#dbeafe;--accent-yellow:#fcd34d;--gold:#fbbf24;--white:#ffffff;--off-white:#f8fafc;--light-gray:#e2e8f0;--medium-gray:#94a3b8;--dark-gray:#1e293b;--success:#10b981;--warning:#f59e0b;--error:#ef4444;--glass:rgba(255, 255, 255, 0.08);--glass-border:rgba(255, 255, 255, 0.18);--shadow-sm:0 1px 2px rgba(0, 0, 0, 0.05);--shadow:0 4px 6px -1px rgba(0, 0, 0, 0.1),0 2px 4px -1px rgba(0, 0, 0, 0.06);--shadow-lg:0 10px 15px -3px rgba(0, 0, 0, 0.1),0 4px 6px -2px rgba(0, 0, 0, 0.05);--shadow-xl:0 20px 25px -5px rgba(0, 0, 0, 0.1),0 10px 10px -5px rgba(0, 0, 0, 0.04);--transition:all 0.3s cubic-bezier(0.4, 0, 0.2, 1);--radius-sm:8px;--radius-md:12px;--radius-lg:16px;--radius-xl:24px;--radius-full:9999px}
        *{margin:0;padding:0;box-sizing:border-box;-webkit-tap-highlight-color:transparent;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}
        input, textarea, select, button, a, .user-type-btn, .toggle-btn, .day-button, .module-card, .appointment-item, .client-request-item, .admin-list-item, .admin-user-item, .option-button, .filter-button, .close-button, .back-button, .logout-button, .pagination-controls button, .whatsapp-btn, .btn-ok, .btn-cancel, .btn-approve, .btn-reject, .btn-view-docs, .btn-save-user, .add-medication-btn, .remove-medication-btn, .coren-toggle-btn, .admin-user-type-toggle button { -webkit-user-select: auto; -moz-user-select: auto; -ms-user-select: auto; user-select: auto; }
        body{font-family:Poppins,sans-serif;background:linear-gradient(135deg,#f0f9ff 0,#e0f2fe 100%);color:var(--dark-gray);line-height:1.6;overflow-x:hidden;min-height:100vh;display:flex;justify-content:center;align-items:center}
        ::-webkit-scrollbar{width:8px;height:8px}::-webkit-scrollbar-track{background:rgba(255,255,255,.1);border-radius:10px}::-webkit-scrollbar-thumb{background:rgba(0,0,0,.2);border-radius:10px;transition:background .3s ease}::-webkit-scrollbar-thumb:hover{background:rgba(0,0,0,.4)}
        html{scrollbar-width:thin;scrollbar-color:rgba(0,0,0,.2) rgba(255,255,255,.1)}.app-container{max-width:480px;width:100%;margin:0 auto;background-color:var(--white);box-shadow:var(--shadow-xl);position:relative;overflow:hidden;min-height:100vh;border-radius:0;display:flex;flex-direction:column}
        @media (min-width:768px){.app-container{border-radius:var(--radius-xl);margin:2rem auto;min-height:90vh;height:auto;overflow:hidden}}
        .auth-screen{display:flex;flex-direction:column;align-items:center;justify-content:center;padding:2rem 1.5rem;min-height:100vh;background:linear-gradient(135deg,var(--primary-blue) 0,var(--dark-blue) 100%);color:var(--white);text-align:center;flex-grow:1}
        .logo-container{margin-bottom:2.5rem;animation:fadeInDown .8s ease-out}.logo-container .logo-icon{width:100px;height:100px;background:rgba(255,255,255,.1);backdrop-filter:blur(10px);border-radius:var(--radius-full);display:flex;align-items:center;justify-content:center;margin:0 auto 1.5rem;border:2px solid rgba(255,255,255,.2);box-shadow:var(--shadow-lg)}
        .logo-container .logo-icon i{font-size:3.5rem;color:var(--white)!important;}
        .logo-container h1{font-weight:700;font-size:2.2rem;margin-bottom:.5rem;letter-spacing:.5px;background:linear-gradient(to right,var(--white),var(--white));-webkit-background-clip:text;-webkit-text-fill-color:transparent;filter:drop-shadow(0 2px 4px rgba(0, 0, 0, .2))}
        .logo-container p{font-size:1rem;opacity:.9;font-weight:300}.auth-form{width:100%;max-width:400px;background:var(--glass);backdrop-filter:blur(12px);border-radius:var(--radius-xl);padding:2rem;box-shadow:var(--shadow-lg);animation:fadeInUp .8s ease-out;border:1px solid var(--glass-border)}
        .form-toggle{display:flex;margin-bottom:1.5rem;background-color:var(--glass);border-radius:var(--radius-full);overflow:hidden;position:relative;box-shadow:inset 0 2px 4px rgba(0,0,0,.1)}.form-toggle::before{content:'';position:absolute;top:0;left:0;width:50%;height:100%;background:var(--light-blue);border-radius:var(--radius-full);transition:transform .4s cubic-bezier(.68,-.55,.27,1.55);z-index:0}.form-toggle.register-active::before{transform:translateX(100%)}
        .toggle-btn{flex:1;padding:.8rem;text-align:center;background:0 0;border:none;color:var(--white);font-weight:500;font-size:.95rem;cursor:pointer;transition:var(--transition);position:relative;z-index:1}.toggle-btn.active{color:var(--white);font-weight:600}
        .input-group{margin-bottom:1.25rem;text-align:left}.input-group label{display:block;margin-bottom:.5rem;font-weight:500;font-size:.9rem;color:var(--white);opacity:.9}
        .input-group input,.input-group select,.input-group textarea{width:100%;padding:.9rem 1.2rem;border:none;border-radius:var(--radius-md);background-color:rgba(255,255,255,.9);font-family:'Open Sans',sans-serif;font-size:.95rem;color:var(--dark-gray);transition:var(--transition);box-shadow:var(--shadow-sm);border:1px solid transparent}
        .input-group input::placeholder,.input-group textarea::placeholder{color:var(--medium-gray);opacity:.7}.input-group input:focus,.input-group select:focus,.input-group textarea:focus{outline:0;box-shadow:0 0 0 3px rgba(59,130,246,.3);border-color:var(--light-blue)}
        .file-upload-label{display:flex;align-items:center;justify-content:center;width:100%;padding:.9rem 1.2rem;border:2px dashed rgba(255,255,255,.4);border-radius:var(--radius-md);background-color:var(--glass);color:var(--white);font-weight:500;cursor:pointer;transition:var(--transition);font-size:.9rem}.file-upload-label:hover{background-color:rgba(255,255,255,.15);border-color:var(--accent-yellow)}.file-upload-label.uploaded{background-color:rgba(16,185,129,.2);border-color:var(--success);color:var(--white)}
        .file-upload-input{display:none}.coren-toggle-group{display:flex;gap:.75rem;margin-top:.5rem}.coren-toggle-btn{flex:1;padding:.7rem;background-color:var(--glass);border:2px solid transparent;border-radius:var(--radius-md);color:var(--white);font-weight:500;font-size:.85rem;cursor:pointer;transition:var(--transition)}.coren-toggle-btn.active{background-color:var(--light-blue);border-color:var(--accent-yellow);box-shadow:var(--shadow)}
        .user-type{display:flex;gap:1rem;margin-bottom:1.5rem}.user-type-btn{flex:1;padding:1.25rem .75rem;background:var(--glass);border:2px solid transparent;border-radius:var(--radius-lg);color:var(--white);font-weight:500;cursor:pointer;transition:var(--transition);text-align:center;box-shadow:var(--shadow)}.user-type-btn.active{background:var(--light-blue);border-color:var(--accent-yellow);box-shadow:var(--shadow-lg);transform:translateY(-3px)}
        .user-type-btn i{font-size:1.8rem;margin-bottom:.75rem;display:block;color:var(--white)!important;}
        .terms{display:flex;align-items:flex-start;margin-bottom:1.5rem;font-size:.85rem;color:var(--white)}.terms input{margin-right:.75rem;margin-top:.25rem;min-width:18px;min-height:18px;accent-color:var(--accent-yellow)}.terms label{text-align:justify;font-weight:400;opacity:.9}.terms label a{color:var(--accent-yellow);text-decoration:underline;font-weight:600;transition:color .2s ease}.terms label a:hover{color:var(--white)}
        .btn{width:100%;padding:1rem;border:none;border-radius:var(--radius-lg);background:linear-gradient(to right,var(--primary-blue),var(--light-blue));color:var(--white);font-weight:600;font-size:1rem;cursor:pointer;transition:var(--transition);box-shadow:var(--shadow);letter-spacing:.5px;position:relative;overflow:hidden}.btn:after{content:'';position:absolute;top:-50%;left:-60%;width:20px;height:200%;background:rgba(255,255,255,.3);transform:rotate(25deg);transition:all .6s ease}.btn:hover{transform:translateY(-3px);box-shadow:var(--shadow-lg)}.btn:active{transform:translateY(0);box-shadow:var(--shadow)}
        .main-screen{display:none;flex-direction:column;flex-grow:1;padding-bottom:1.5rem;background-color:var(--off-white);position:relative;overflow-y:auto}.header{background:linear-gradient(to right,var(--dark-blue),var(--primary-blue));color:var(--white);padding:1.5rem 1.25rem 2rem;position:relative;z-index:10;border-bottom-left-radius:var(--radius-xl);border-bottom-right-radius:var(--radius-xl);box-shadow:var(--shadow-lg);padding-top:2.5rem}
        .user-info{display:flex;align-items:center;margin-bottom:1.25rem}.user-avatar{width:70px;height:70px;border-radius:var(--radius-full);background-color:var(--sky-blue);display:flex;align-items:center;justify-content:center;margin-right:1rem;font-size:1.8rem;color:var(--dark-blue);border:3px solid var(--white);overflow:hidden;box-shadow:var(--shadow);flex-shrink:0}.user-avatar img{width:100%;height:100%;object-fit:cover}
        .user-details{flex:1}.user-name{font-weight:600;font-size:1.3rem;margin-bottom:.25rem;color:var(--white)}.user-badge{display:inline-block;padding:.3rem .8rem;background-color:var(--accent-yellow);color:var(--dark-blue);border-radius:var(--radius-full);font-size:.8rem;font-weight:700;box-shadow:var(--shadow-sm)}
        .user-rating{display:flex;align-items:center;margin-top:.5rem}.user-rating .stars{color:var(--accent-yellow);margin-right:.5rem;font-size:1rem}.welcome-message{background-color:var(--white);color:var(--dark-gray);padding:1rem;border-radius:var(--radius-lg);margin-top:1rem;position:relative;box-shadow:var(--shadow);font-size:.9rem;line-height:1.5;font-weight:400}.welcome-message:before{content:'';position:absolute;top:-12px;left:30px;width:20px;height:20px;background-color:var(--white);transform:rotate(45deg);box-shadow:-2px -2px 5px rgba(0,0,0,.05)}
        .modules{padding:1.5rem 1.25rem;flex:1;display:grid;grid-template-columns:repeat(auto-fill,minmax(100%,1fr));gap:1.25rem}@media (min-width:480px){.modules{grid-template-columns:repeat(auto-fill,minmax(48%,1fr))}}
        .module-card{background-color:var(--white);border-radius:var(--radius-lg);padding:1.5rem;box-shadow:var(--shadow);transition:var(--transition);cursor:pointer;overflow:hidden;position:relative;border:1px solid var(--light-gray)}.module-card:hover{transform:translateY(-5px);box-shadow:var(--shadow-lg)}
        .module-header{display:flex;align-items:center;margin-bottom:1rem}.module-icon{width:50px;height:50px;border-radius:var(--radius-md);background:linear-gradient(135deg,var(--primary-blue),var(--light-blue));display:flex;align-items:center;justify-content:center;margin-right:1rem;font-size:1.5rem;color:var(--white);box-shadow:var(--shadow);flex-shrink:0}
        .module-title{font-weight:600;font-size:1.15rem;color:var(--dark-blue)}.module-description{color:var(--medium-gray);font-size:.9rem;line-height:1.5}.disabled-module{opacity:.7;cursor:not-allowed}.disabled-module:after{content:"Em breve";position:absolute;top:12px;right:12px;background-color:var(--warning);color:var(--dark-gray);padding:.3rem .8rem;border-radius:var(--radius-full);font-size:.75rem;font-weight:700;box-shadow:var(--shadow-sm)}
        .appointment-list{margin-top:1.5rem;overflow-y:auto}.appointment-category{margin-bottom:1.5rem}.category-title{font-weight:600;color:var(--dark-blue);margin-bottom:.75rem;padding-bottom:.5rem;border-bottom:2px solid var(--sky-blue);font-size:1.05rem}
        .appointment-item{background-color:var(--white);border-radius:var(--radius-md);padding:1rem;margin-bottom:.75rem;transition:var(--transition);cursor:pointer;box-shadow:var(--shadow);border-left:4px solid var(--primary-blue)}.appointment-item:hover{background-color:var(--sky-blue);transform:translateY(-2px);box-shadow:var(--shadow-lg)}
        .patient-name{font-weight:600;font-size:1rem;margin-bottom:.5rem;color:var(--primary-blue)}.appointment-time{color:var(--medium-gray);font-weight:500;font-size:.85rem;margin-bottom:.5rem}.appointment-status{display:inline-block;padding:.25rem .7rem;border-radius:var(--radius-full);font-size:.8rem;font-weight:600;text-transform:uppercase;letter-spacing:.5px}
        .status-pending{background-color:rgba(245,158,11,.15);color:var(--warning)}.status-confirmed{background-color:rgba(16,185,129,.15);color:var(--success)}.status-completed{background-color:rgba(16,185,129,.15);color:var(--success)}.status-cancelled{background-color:rgba(239,68,68,.15);color:var(--error)}.status-refused{background-color:rgba(239,68,68,.15);color:var(--error)}
        .profile-edit-screen{display:none;flex-direction:column;padding:1.5rem 1.25rem;background-color:var(--off-white);flex-grow:1;position:relative;overflow-y:auto}.profile-edit-screen h2{color:var(--dark-blue);margin-bottom:1.5rem;text-align:center;font-size:1.6rem;font-weight:700;padding-top:.5rem}.profile-edit-screen .input-group{margin-bottom:1.25rem;text-align:left}.profile-edit-screen .input-group label{color:var(--dark-gray);font-weight:500;font-size:.9rem;display:block;margin-bottom:.5rem}.profile-edit-screen .btn{margin-top:1.5rem}
        .profile-section{background-color:var(--white);border-radius:var(--radius-lg);padding:1.5rem;margin-bottom:1.25rem;box-shadow:var(--shadow)}.profile-section h3{color:var(--primary-blue);margin-bottom:1rem;border-bottom:1px solid var(--light-gray);padding-bottom:.75rem;font-size:1.15rem;font-weight:600}.profile-section p{margin-bottom:.75rem;color:var(--medium-gray);font-size:.95rem}.profile-section strong{color:var(--dark-gray);font-weight:600}.profile-section ul{list-style:none;padding:0}.profile-section ul li{margin-bottom:.5rem;color:var(--medium-gray);font-size:.9rem}
        .medication-item{background-color:var(--off-white);border:1px solid var(--light-gray);border-radius:var(--radius-md);padding:.75rem;margin-bottom:.75rem;display:flex;flex-direction:column;gap:.5rem;position:relative}.medication-item .medication-details{display:flex;flex-direction:column}.medication-item .medication-details strong{color:var(--dark-blue);font-size:.95rem}.medication-item .medication-details span{font-size:.85rem;color:var(--medium-gray)}
        .medication-item .remove-medication-btn{position:absolute;top:.5rem;right:.5rem;background:0 0;border:none;color:var(--error);font-size:1.2rem;cursor:pointer;padding:.2rem;border-radius:var(--radius-sm);transition:background-color .2s}.medication-item .remove-medication-btn:hover{background-color:rgba(239,68,68,.1)}
        .add-medication-btn{background-color:var(--success);color:var(--white);padding:.75rem;border:none;border-radius:var(--radius-md);cursor:pointer;font-weight:600;margin-top:1rem;transition:var(--transition)}.add-medication-btn:hover{background-color:#059669;transform:translateY(-2px)}
        .patient-details-screen{display:none;flex-direction:column;padding:1.5rem 1.25rem;background-color:var(--off-white);flex-grow:1;position:relative;overflow-y:auto}.patient-details-screen h2{color:var(--dark-blue);margin-bottom:1.5rem;text-align:center;font-size:1.6rem;font-weight:700;padding-top:.5rem}
        .patient-details-screen .info-item{background-color:var(--white);border-radius:var(--radius-md);padding:1rem;margin-bottom:.75rem;box-shadow:var(--shadow);border-left:4px solid var(--primary-blue)}.patient-details-screen .info-item strong{color:var(--primary-blue);display:block;margin-bottom:.5rem;font-size:.95rem;font-weight:600}.patient-details-screen .info-item p{color:var(--dark-gray);font-size:.95rem}
        .schedule-caregiver-screen{display:none;flex-direction:column;padding:1.5rem 1.25rem;background-color:var(--off-white);flex-grow:1;position:relative;overflow-y:auto}.schedule-caregiver-screen h2{color:var(--dark-blue);margin-bottom:1.5rem;text-align:center;font-size:1.6rem;font-weight:700;padding-top:.5rem}
        .schedule-caregiver-screen .caregiver-info-summary{background-color:var(--white);border-radius:var(--radius-lg);padding:1.25rem;margin-bottom:1.5rem;box-shadow:var(--shadow);display:flex;align-items:center;border:1px solid var(--light-gray)}.schedule-caregiver-screen .caregiver-info-summary .avatar{width:65px;height:65px;border-radius:var(--radius-full);background-color:var(--sky-blue);display:flex;align-items:center;justify-content:center;margin-right:1rem;font-size:1.5rem;color:var(--dark-blue);overflow:hidden;border:3px solid var(--accent-yellow);flex-shrink:0}.schedule-caregiver-screen .caregiver-info-summary .avatar img{width:100%;height:100%;object-fit:cover}
        .schedule-caregiver-screen .caregiver-info-summary .details{flex:1}.schedule-caregiver-screen .caregiver-info-summary .name{font-weight:600;font-size:1.1rem;color:var(--dark-blue);margin-bottom:.25rem}.schedule-caregiver-screen .caregiver-info-summary .rating{color:var(--accent-yellow);font-size:.95rem}
        .schedule-caregiver-screen .form-section{background-color:var(--white);border-radius:var(--radius-lg);padding:1.5rem;margin-bottom:1.25rem;box-shadow:var(--shadow);border:1px solid var(--light-gray)}.schedule-caregiver-screen .form-section h3{color:var(--primary-blue);margin-bottom:1rem;border-bottom:1px solid var(--light-gray);padding-bottom:.75rem;font-size:1.15rem;font-weight:600}
        .day-selection{display:flex;flex-wrap:wrap;gap:.5rem;margin-bottom:1.5rem}.day-button{flex:1 1 calc(33.33% - .5rem);padding:.75rem;border:1px solid var(--light-gray);border-radius:var(--radius-md);background-color:var(--off-white);color:var(--dark-gray);font-weight:500;cursor:pointer;transition:var(--transition);text-align:center;min-width:80px}.day-button.selected{background-color:var(--primary-blue);color:var(--white);border-color:var(--primary-blue);box-shadow:var(--shadow-sm)}.day-button:hover:not(.selected){background-color:var(--sky-blue)}
        .time-selection{display:grid;grid-template-columns:1fr 1fr;gap:1rem;margin-bottom:1.5rem}.time-selection input[type=date],.time-selection input[type=time]{width:100%;padding:.8rem;border:1px solid var(--light-gray);border-radius:var(--radius-md);font-size:.95rem;color:var(--dark-gray);transition:var(--transition)}.time-selection input[type=date]:focus,.time-selection input[type=time]:focus{outline:0;border-color:var(--primary-blue);box-shadow:0 0 0 3px rgba(59,130,246,.2)}
        .schedule-caregiver-screen textarea{min-height:100px;resize:vertical;border-radius:var(--radius-md);padding:.8rem;border:1px solid var(--light-gray);font-family:'Open Sans',sans-serif;font-size:.95rem;color:var(--dark-gray);transition:var(--transition)}.schedule-caregiver-screen textarea:focus{outline:0;border-color:var(--primary-blue);box-shadow:0 0 0 3px rgba(59,130,246,.2)}
        .back-button{position:absolute;top:1.25rem;left:1.25rem;background:var(--white);border:none;border-radius:var(--radius-full);width:40px;height:40px;display:flex;align-items:center;justify-content:center;color:var(--primary-blue);font-size:1.4rem;cursor:pointer;z-index:20;transition:var(--transition);box-shadow:var(--shadow)}.back-button:hover{transform:translateX(-3px) scale(1.05);background-color:var(--sky-blue)}
        .auth-message{color:var(--white)!important;text-align:center;margin-top:1rem;font-weight:500;font-size:.95rem}.loading-message{animation:pulse 1.5s infinite ease-in-out}@keyframes pulse{0%{opacity:.7}50%{opacity:1}100%{opacity:.7}}
        #clientProfilePhotoPreview,#profilePhotoPreview{width:140px;height:140px;object-fit:cover;border-radius:var(--radius-full);border:4px solid var(--light-blue);box-shadow:var(--shadow);cursor:pointer}
        .custom-overlay{position:fixed;top:0;left:0;width:100%;height:100%;background-color:rgba(0,0,0,.7);display:flex;justify-content:center;align-items:center;z-index:1000;opacity:0;visibility:hidden;transition:opacity .4s ease-in-out,visibility .4s ease-in-out}.custom-overlay.show{opacity:1;visibility:visible}
        .custom-alert-box{background-color:var(--white);border-radius:var(--radius-lg);padding:2rem;box-shadow:var(--shadow-xl);max-width:350px;width:90%;text-align:center;transform:translateY(-30px) scale(.9);opacity:0;transition:transform .4s cubic-bezier(.68,-.55,.27,1.55),opacity .4s ease-in-out}.custom-overlay.show .custom-alert-box{transform:translateY(0) scale(1);opacity:1}
        .custom-alert-box h3{color:var(--dark-blue);margin-bottom:1rem;font-size:1.5rem;font-weight:700}.custom-alert-box p{color:var(--dark-gray);margin-bottom:1.5rem;line-height:1.6;font-size:.95rem}.custom-alert-box .alert-buttons{display:flex;gap:.75rem;justify-content:center}
        .custom-alert-box .alert-buttons button{padding:.8rem 1.5rem;border:none;border-radius:var(--radius-md);font-weight:600;cursor:pointer;transition:var(--transition);font-size:.95rem}.custom-alert-box .alert-buttons .btn-ok{background:linear-gradient(to right,var(--primary-blue),var(--light-blue));color:var(--white);box-shadow:var(--shadow)}.custom-alert-box .alert-buttons .btn-ok:hover{transform:translateY(-2px);box-shadow:var(--shadow-lg)}
        .custom-alert-box .alert-buttons .btn-cancel{background-color:var(--light-gray);color:var(--dark-gray);box-shadow:var(--shadow)}.custom-alert-box .alert-buttons .btn-cancel:hover{background-color:var(--medium-gray);color:var(--white);transform:translateY(-2px)}
        .patient-actions{display:flex;flex-wrap:wrap;gap:.75rem;margin-top:1.5rem;justify-content:center}.patient-actions .btn{width:auto;padding:.8rem 1.25rem;font-size:.95rem;flex-grow:1;min-width:140px}
        .patient-actions .btn-confirm{background:linear-gradient(to right,var(--success),#34d399)}.patient-actions .btn-confirm:hover{background:linear-gradient(to right,#059669,#34d399)}
        .patient-actions .btn-complete{background:linear-gradient(to right,var(--dark-blue),var(--primary-blue))}.patient-actions .btn-complete:hover{background:linear-gradient(to right,#1e40af,var(--primary-blue))}
        .patient-actions .btn-cancel-appointment{background:linear-gradient(to right,var(--error),#f87171)}.patient-actions .btn-cancel-appointment:hover{background:linear-gradient(to right,#dc2626,#f87171)}
        .header-actions{position:absolute;top:1.5rem;right:1.25rem;display:flex;gap:1rem;z-index:11}.logout-button{font-size:1.4rem;color:var(--white);cursor:pointer;transition:transform .2s ease-in-out;background:0 0;border:none;padding:0;position:relative}.logout-button:hover{transform:scale(1.1);color:var(--accent-yellow)}
        .client-requests-history-screen{display:none;flex-direction:column;padding:1.5rem 1.25rem;background-color:var(--off-white);flex-grow:1;position:relative;overflow-y:auto}.client-requests-history-screen h2{color:var(--dark-blue);margin-bottom:1.5rem;text-align:center;font-size:1.6rem;font-weight:700;padding-top:.5rem}
        .client-requests-list{margin-top:1rem}.client-request-item{background-color:var(--white);border-radius:var(--radius-md);padding:1rem;margin-bottom:.75rem;transition:var(--transition);cursor:pointer;box-shadow:var(--shadow);border-left:4px solid var(--primary-blue)}.client-request-item:hover{background-color:var(--sky-blue);transform:translateY(-2px);box-shadow:var(--shadow-lg)}
        .client-request-item .caregiver-name{font-weight:600;font-size:1rem;margin-bottom:.5rem;color:var(--primary-blue)}.client-request-item .request-info{color:var(--medium-gray);font-weight:500;font-size:.85rem;margin-bottom:.5rem}
        .client-request-item .request-status{display:inline-block;padding:.25rem .7rem;border-radius:var(--radius-full);font-size:.8rem;font-weight:600;text-transform:uppercase;letter-spacing:.5px}.client-request-item .whatsapp-link{display:inline-flex;align-items:center;gap:.3rem;color:var(--success);text-decoration:none;font-weight:600;margin-top:.5rem}.client-request-item .whatsapp-link i{font-size:1.1rem}
        .pagination-controls{display:flex;justify-content:center;gap:1rem;margin-top:1.5rem;margin-bottom:1rem}.pagination-controls button{padding:.6rem 1.2rem;border:none;border-radius:var(--radius-md);background-color:var(--primary-blue);color:var(--white);font-weight:600;cursor:pointer;transition:var(--transition)}.pagination-controls button:disabled{background-color:var(--medium-gray);cursor:not-allowed;opacity:.7}.pagination-controls button:hover:not(:disabled){background-color:var(--dark-blue);transform:translateY(-2px)}
        .client-request-details-screen{display:none;flex-direction:column;padding:1.5rem 1.25rem;background-color:var(--off-white);flex-grow:1;position:relative;overflow-y:auto}.client-request-details-screen h2{color:var(--dark-blue);margin-bottom:1.5rem;text-align:center;font-size:1.6rem;font-weight:700;padding-top:.5rem}
        .client-request-details-screen .caregiver-summary{background-color:var(--white);border-radius:var(--radius-lg);padding:1.25rem;margin-bottom:1.5rem;box-shadow:var(--shadow);display:flex;align-items:center;border:1px solid var(--light-gray)}.client-request-details-screen .caregiver-summary .avatar{width:65px;height:65px;border-radius:var(--radius-full);background-color:var(--sky-blue);display:flex;align-items:center;justify-content:center;margin-right:1rem;font-size:1.5rem;color:var(--dark-blue);overflow:hidden;border:3px solid var(--accent-yellow);flex-shrink:0}.client-request-details-screen .caregiver-summary .avatar img{width:100%;height:100%;object-fit:cover}
        .client-request-details-screen .caregiver-summary .details{flex:1}.client-request-details-screen .caregiver-summary .name{font-weight:600;font-size:1.1rem;color:var(--dark-blue);margin-bottom:.25rem}.client-request-details-screen .caregiver-summary .rating{color:var(--accent-yellow);font-size:.95rem}
        .client-request-details-screen .info-item{background-color:var(--white);border-radius:var(--radius-md);padding:1rem;margin-bottom:.75rem;box-shadow:var(--shadow);border-left:4px solid var(--primary-blue)}.client-request-details-screen .info-item strong{color:var(--primary-blue);display:block;margin-bottom:.5rem;font-size:.95rem;font-weight:600}.client-request-details-screen .info-item p{color:var(--dark-gray);font-size:.95rem}
        .client-request-details-screen .profile-section{background-color:var(--white);border-radius:var(--radius-lg);padding:1.5rem;margin-bottom:1.25rem;box-shadow:var(--shadow)}.client-request-details-screen .profile-section h3{color:var(--primary-blue);margin-bottom:1rem;border-bottom:1px solid var(--light-gray);padding-bottom:.75rem;font-size:1.15rem;font-weight:600}.client-request-details-screen .profile-section p{margin-bottom:.75rem;color:var(--medium-gray);font-size:.95rem}
        .admin-screen{display:none;flex-direction:column;flex-grow:1;padding-bottom:1.5rem;background-color:var(--off-white);position:relative;overflow-y:auto}.admin-screen .header{background:linear-gradient(to right,#4caf50,#8bc34a)}.admin-screen .header .user-badge{background-color:var(--white);color:#4caf50}
        .admin-screen h2{color:var(--dark-blue);margin-bottom:1.5rem;text-align:center;font-size:1.6rem;font-weight:700;padding-top:.5rem}.admin-section{background-color:var(--white);border-radius:var(--radius-lg);padding:1.5rem;margin:1.5rem 1.25rem 1.25rem;box-shadow:var(--shadow)}
        .admin-section h3{color:var(--primary-blue);margin-bottom:1rem;border-bottom:1px solid var(--light-gray);padding-bottom:.75rem;font-size:1.15rem;font-weight:600}.admin-list{list-style:none;padding:0}
        .admin-list-item{background-color:var(--off-white);border:1px solid var(--light-gray);border-radius:var(--radius-md);padding:1rem;margin-bottom:.75rem;display:flex;flex-direction:column;gap:.5rem;box-shadow:var(--shadow-sm)}.admin-list-item .item-details{font-size:.95rem;color:var(--dark-gray)}.admin-list-item .item-details strong{color:var(--primary-blue)}
        .admin-list-item .item-actions{display:flex;gap:.5rem;margin-top:.75rem;justify-content:flex-end}.admin-list-item .item-actions button{padding:.5rem 1rem;border:none;border-radius:var(--radius-md);font-weight:600;cursor:pointer;transition:var(--transition);font-size:.85rem}
        .admin-list-item .item-actions .btn-approve{background-color:var(--success);color:var(--white)}.admin-list-item .item-actions .btn-approve:hover{background-color:#059669}
        .admin-list-item .item-actions .btn-reject{background-color:var(--error);color:var(--white)}.admin-list-item .item-actions .btn-reject:hover{background-color:#dc2626}
        .admin-list-item .item-actions .btn-view-docs{background-color:var(--primary-blue);color:var(--white)}.admin-list-item .item-actions .btn-view-docs:hover{background-color:var(--dark-blue)}
        .admin-user-list-container{display:flex;flex-direction:column;gap:1rem}.admin-user-type-toggle{display:flex;background-color:var(--light-gray);border-radius:var(--radius-md);overflow:hidden}
        .admin-user-type-toggle button{flex:1;padding:.75rem;border:none;background-color:transparent;font-weight:600;color:var(--dark-gray);cursor:pointer;transition:var(--transition)}.admin-user-type-toggle button.active{background-color:var(--primary-blue);color:var(--white)}
        .admin-user-item{background-color:var(--white);border-radius:var(--radius-md);padding:1rem;box-shadow:var(--shadow-sm);display:flex;align-items:center;gap:1rem;cursor:pointer;transition:var(--transition)}.admin-user-item:hover{transform:translateY(-2px);box-shadow:var(--shadow)}
        .admin-user-item .avatar{width:40px;height:40px;border-radius:var(--radius-full);background-color:var(--sky-blue);display:flex;align-items:center;justify-content:center;font-size:1.2rem;color:var(--dark-blue);overflow:hidden}.admin-user-item .avatar img{width:100%;height:100%;object-fit:cover}
        .admin-user-item .user-info-text{flex-grow:1}.admin-user-item .user-info-text strong{display:block;color:var(--dark-blue);font-size:1rem}.admin-user-item .user-info-text span{font-size:.85rem;color:var(--medium-gray)}
        .admin-user-details-popup{background-color:var(--white);border-radius:var(--radius-lg);padding:2rem;box-shadow:var(--shadow-xl);max-width:450px;width:90%;max-height:90vh;overflow-y:auto;position:relative}.admin-user-details-popup h3{color:var(--dark-blue);margin-bottom:1.5rem;text-align:center;font-size:1.8rem;font-weight:700}
        .admin-user-details-popup .profile-section{padding:1rem;margin-bottom:1rem}.admin-user-details-popup .profile-section h4{color:var(--primary-blue);margin-bottom:.75rem;font-size:1.05rem;font-weight:600}
        .admin-user-details-popup .input-group label{color:var(--dark-gray)}.admin-user-details-popup .rating-input{display:flex;align-items:center;gap:.5rem;margin-top:.5rem}.admin-user-details-popup .rating-input input{width:60px;text-align:center}.admin-user-details-popup .rating-input .stars{color:var(--accent-yellow);font-size:1.2rem}
        .admin-user-details-popup .btn-save-user{margin-top:1.5rem}.fc .fc-toolbar-title{font-size:1.2em;color:var(--dark-blue)}.fc .fc-button{background-color:var(--primary-blue);border-color:var(--primary-blue);color:var(--white)}.fc .fc-button:hover{background-color:var(--dark-blue);border-color:var(--dark-blue)}
        .fc-event{background-color:var(--success)!important;border-color:var(--success)!important;color:var(--white)!important;font-size:.8em;padding:2px 4px;border-radius:4px}.fc-event-title{white-space:normal}
        .charts-container{display:grid;grid-template-columns:1fr;gap:1.5rem;padding:1.5rem 1.25rem}.chart-card{background-color:var(--white);border-radius:var(--radius-lg);padding:1.5rem;box-shadow:var(--shadow);border:1px solid var(--light-gray)}.chart-card h3{color:var(--primary-blue);margin-bottom:1rem;font-size:1.15rem;font-weight:600;text-align:center}
        @media (min-width:480px){.charts-container{grid-template-columns:repeat(auto-fill,minmax(48%,1fr))}}
        @keyframes fadeIn{from{opacity:0}to{opacity:1}}@keyframes fadeInUp{from{opacity:0;transform:translateY(30px)}to{opacity:1;transform:translateY(0)}}@keyframes fadeInDown{from{opacity:0;transform:translateY(-30px)}to{opacity:1;transform:translateY(0)}}
        .fade-in{animation:fadeIn .5s ease forwards}@media (max-width:480px){.auth-form{padding:1.5rem}.user-type{flex-direction:column}.carousel-container{height:480px}.header-actions{right:1rem;gap:.75rem}.day-button{flex:1 1 calc(50% - .5rem)}}
        .caregiver-carousel-container{position:relative;width:100%;overflow:hidden;margin:1.5rem 0;border-radius:var(--radius-lg);box-shadow:var(--shadow-lg);background-color:var(--white);display:flex;flex-direction:column;min-height:450px}
        .caregiver-carousel-inner{display:flex;transition:transform .5s cubic-bezier(.25,.46,.45,.94);height:100%;width:100%}.caregiver-carousel-item{min-width:100%;flex-shrink:0;flex-basis:100%;height:100%;padding:0;display:flex;flex-direction:column;align-items:center;position:relative;background:linear-gradient(135deg,var(--dark-blue) 0,var(--primary-blue) 100%);color:var(--white);text-align:center;box-sizing:border-box;border-radius:var(--radius-lg);overflow:hidden}
        .caregiver-carousel-profile{width:100%;height:180px;border-radius:var(--radius-lg);border-bottom-left-radius:0;border-bottom-right-radius:0;border:4px solid var(--white);border-bottom:none;background-color:var(--sky-blue);display:flex;align-items:center;justify-content:center;overflow:hidden;box-shadow:var(--shadow-lg);margin-bottom:0}.caregiver-carousel-profile img{width:100%;height:100%;object-fit:cover}.caregiver-carousel-profile i{font-size:4rem;color:var(--dark-blue)}
        .caregiver-carousel-content{padding:1rem 1.5rem;width:100%;display:flex;flex-direction:column;align-items:center;flex-grow:1}.caregiver-carousel-name{font-weight:700;font-size:1.7rem;margin-bottom:.25rem}
        .caregiver-carousel-rating{display:flex;margin-bottom:1rem;align-items:center;justify-content:center}.caregiver-carousel-rating .stars{color:var(--accent-yellow);font-size:1.4rem;margin-right:.5rem}.caregiver-carousel-rating span{font-size:1rem;font-weight:600}
        .caregiver-carousel-bio{background-color:rgba(255,255,255,.95);border-radius:var(--radius-lg);padding:1.25rem;width:100%;margin-top:1rem;color:var(--dark-gray);overflow-y:auto;max-height:170px;text-align:left;box-shadow:var(--shadow);font-size:.9rem;word-wrap:break-word}.caregiver-carousel-bio p{margin-bottom:.75rem;line-height:1.6}.caregiver-carousel-bio strong{color:var(--primary-blue)}
        .caregiver-carousel-nav{display:flex;justify-content:space-between;align-items:center;padding:0 1rem;width:100%;z-index:1;position:absolute;top:50%;transform:translateY(-50%)}.caregiver-carousel-nav .nav-btn{width:45px;height:45px;border-radius:var(--radius-full);background-color:rgba(255,255,255,.8);color:var(--primary-blue);border:none;font-size:1.2rem;display:flex;align-items:center;justify-content:center;cursor:pointer;box-shadow:var(--shadow-lg);transition:var(--transition)}.caregiver-carousel-nav .nav-btn:hover{transform:scale(1.1);background-color:var(--sky-blue);color:var(--dark-blue)}.caregiver-carousel-nav .nav-btn:disabled{opacity:.5;cursor:not-allowed;transform:none;box-shadow:none}
        .appointment-summary-overlay{position:fixed;top:0;left:0;width:100%;height:100%;background-color:rgba(0,0,0,.7);display:flex;justify-content:center;align-items:center;z-index:1000;opacity:0;visibility:hidden;transition:opacity .4s ease-in-out,visibility .4s ease-in-out}.appointment-summary-overlay.show{opacity:1;visibility:visible}
        .appointment-summary-popup{background-color:var(--white);border-radius:var(--radius-lg);padding:2rem;box-shadow:var(--shadow-xl);max-width:400px;width:90%;text-align:center;transform:translateY(-30px) scale(.9);opacity:0;transition:transform .4s cubic-bezier(.68,-.55,.27,1.55),opacity .4s ease-in-out}.appointment-summary-overlay.show .appointment-summary-popup{transform:translateY(0) scale(1);opacity:1}
        .appointment-summary-popup h3{color:var(--dark-blue);margin-bottom:1rem;font-size:1.5rem;font-weight:700}.appointment-summary-popup .summary-photos{display:flex;justify-content:center;gap:1rem;margin-bottom:1.5rem}.appointment-summary-popup .summary-photo{width:80px;height:80px;border-radius:var(--radius-full);object-fit:cover;border:3px solid var(--primary-blue);box-shadow:var(--shadow-sm)}
        .appointment-summary-popup .summary-details{text-align:left;margin-bottom:1.5rem;color:var(--dark-gray)}.appointment-summary-popup .summary-details p{margin-bottom:.5rem}.appointment-summary-popup .summary-details strong{color:var(--primary-blue)}
        .appointment-summary-popup .whatsapp-btn{display:inline-flex;align-items:center;justify-content:center;gap:.5rem;background-color:var(--success);color:var(--white);padding:.8rem 1.5rem;border-radius:var(--radius-md);text-decoration:none;font-weight:600;transition:var(--transition);box-shadow:var(--shadow)}.appointment-summary-popup .whatsapp-btn:hover{background-color:#059669;transform:translateY(-2px);box-shadow:var(--shadow-lg)}.appointment-summary-popup .whatsapp-btn i{font-size:1.2rem}
        .appointment-summary-popup .disclaimer{font-size:.8rem;color:var(--medium-gray);margin-top:1rem;line-height:1.4}.appointment-summary-popup .btn-ok{width:100%;padding:1rem;border:none;border-radius:var(--radius-lg);background:linear-gradient(to right,var(--primary-blue),var(--light-blue));color:var(--white);font-weight:600;font-size:1rem;cursor:pointer;transition:var(--transition);box-shadow:var(--shadow);letter-spacing:.5px;position:relative;overflow:hidden;margin-top:1.5rem}.appointment-summary-popup .btn-ok:hover{transform:translateY(-3px);box-shadow:var(--shadow-lg)}
        .admin-list-item .item-actions .btn-view-docs{display:flex;align-items:center;gap:5px}.admin-user-details-popup .document-preview{margin-top:1rem;text-align:center}.admin-user-details-popup .document-preview img{max-width:100%;height:auto;border-radius:var(--radius-md);box-shadow:var(--shadow-sm);margin-bottom:10px}
        .admin-user-details-popup .document-preview a{display:inline-block;margin-top:5px;color:var(--primary-blue);text-decoration:none;font-weight:500}.admin-user-details-popup .document-preview a:hover{text-decoration:underline}
        .photo-options-popup{background-color:var(--white);border-radius:var(--radius-lg);padding:1.5rem;box-shadow:var(--shadow-xl);max-width:300px;width:90%;text-align:center;position:relative}.photo-options-popup h3{color:var(--dark-blue);margin-bottom:1rem;font-size:1.3rem}
        .photo-options-popup .option-button{width:100%;padding:.8rem;margin-bottom:.75rem;border:1px solid var(--light-gray);border-radius:var(--radius-md);background-color:var(--off-white);color:var(--dark-gray);font-weight:500;cursor:pointer;transition:var(--transition)}.photo-options-popup .option-button:hover{background-color:var(--sky-blue);color:var(--primary-blue)}.photo-options-popup .option-button i{margin-right:.5rem}
        .photo-options-popup .close-button{position:absolute;top:.75rem;right:.75rem;background:0 0;border:none;font-size:1.2rem;color:var(--medium-gray);cursor:pointer}
        .photo-view-popup{background-color:var(--white);border-radius:var(--radius-lg);padding:1.5rem;box-shadow:var(--shadow-xl);max-width:90%;max-height:90%;display:flex;flex-direction:column;align-items:center;justify-content:center;position:relative}.photo-view-popup img{max-width:100%;max-height:80vh;object-fit:contain;border-radius:var(--radius-md)}
        .photo-view-popup .close-button{position:absolute;top:.75rem;right:.75rem;background:0 0;border:none;font-size:1.5rem;color:var(--medium-gray);cursor:pointer}
        .filter-button{position:absolute;top:1rem;right:1rem;background:rgba(255,255,255,.8);border:none;border-radius:var(--radius-full);width:40px;height:40px;display:flex;align-items:center;justify-content:center;color:var(--primary-blue);font-size:1.2rem;cursor:pointer;box-shadow:var(--shadow);transition:var(--transition);z-index:10}.filter-button:hover{transform:scale(1.1);background-color:var(--sky-blue)}
        .filter-overlay{position:fixed;top:0;left:0;width:100%;height:100%;background-color:rgba(0,0,0,.7);display:flex;justify-content:center;align-items:center;z-index:1001;opacity:0;visibility:hidden;transition:opacity .4s ease-in-out,visibility .4s ease-in-out}.filter-overlay.show{opacity:1;visibility:visible}
        .filter-popup{background-color:var(--white);border-radius:var(--radius-lg);padding:2rem;box-shadow:var(--shadow-xl);max-width:400px;width:90%;transform:translateY(-30px) scale(.9);opacity:0;transition:transform .4s cubic-bezier(.68,-.55,.27,1.55),opacity .4s ease-in-out}.filter-overlay.show .filter-popup{transform:translateY(0) scale(1);opacity:1}
        .filter-popup h3{color:var(--dark-blue);margin-bottom:1.5rem;text-align:center;font-size:1.5rem}.filter-popup .input-group{margin-bottom:1rem}
        .filter-popup .input-group label{color:var(--dark-gray);margin-bottom:.5rem}.filter-popup .input-group select,.filter-popup .input-group input[type="number"]{width:100%;padding:.8rem;border:1px solid var(--light-gray);border-radius:var(--radius-md);font-size:.95rem;color:var(--dark-gray)}
        .filter-popup .filter-buttons{display:flex;gap:1rem;margin-top:1.5rem}.filter-popup .filter-buttons .btn{flex:1}
        .filter-popup .close-button{position:absolute;top:1rem;right:1rem;background:none;border:none;font-size:1.2rem;color:var(--medium-gray);cursor:pointer}
    </style>
</head>
<body>
    <div class="app-container">
        <div id="customAlertOverlay" class="custom-overlay"><div class="custom-alert-box"><h3 id="customAlertTitle"></h3><p id="customAlertMessage"></p><div class="alert-buttons"><button class="btn-ok" id="customAlertOkBtn">OK</button><button class="btn-cancel" id="customAlertCancelBtn" style="display:none">Cancelar</button></div></div></div>
        <div id="photoOptionsOverlay" class="custom-overlay"><div class="photo-options-popup"><button class="close-button" id="closePhotoOptionsPopup"><i class="fas fa-times"></i></button><h3>Opções da Foto</h3><button class="option-button" id="viewPhotoBtn"><i class="fas fa-eye"></i>Visualizar</button><button class="option-button" id="editPhotoBtn"><i class="fas fa-edit"></i>Editar</button><input type="file" id="photoUploadInput" class="file-upload-input" accept="image/*" capture="user"></div></div>
        <div id="photoViewOverlay" class="custom-overlay"><div class="photo-view-popup"><button class="close-button" id="closePhotoViewPopup"><i class="fas fa-times"></i></button><img id="photoViewImage" src="" alt="Foto de Perfil"></div></div>
        <div id="adminUserDetailsOverlay" class="custom-overlay"><div class="admin-user-details-popup"><button class="back-button" id="closeAdminUserDetailsPopup"><i class="fas fa-times"></i></button><h3 id="adminUserDetailsTitle"></h3><div class="profile-section"><h4>Informações Pessoais</h4><div class="input-group"><label for="adminEditFullName">Nome Completo</label><input type="text" id="adminEditFullName"></div><div class="input-group"><label for="adminEditEmail">E-mail</label><input type="email" id="adminEditEmail" disabled="disabled"></div><div class="input-group"><label for="adminEditPhone">Telefone</label><input type="tel" id="adminEditPhone"></div><div class="input-group"><label for="adminEditCpf">CPF</label><input type="text" id="adminEditCpf" disabled="disabled"></div><div class="input-group"><label for="adminEditReligion">Religião</label><select id="adminEditReligion"><option value="">Selecione a Religião</option><option value="Católica">Católica</option><option value="Evangélica">Evangélica</option><option value="Espírita">Espírita</option><option value="Umbanda">Umbanda</option><option value="Candomblé">Candomblé</option><option value="Judaísmo">Judaísmo</option><option value="Islamismo">Islamismo</option><option value="Budismo">Budismo</option><option value="Hinduísmo">Hinduísmo</option><option value="Ateu">Ateu</option><option value="Outra">Outra</option><option value="Não Informar">Não Informar</option></select></div><div class="input-group"><label for="adminEditAddress">Endereço</label><input type="text" id="adminEditAddress"></div><div class="input-group" id="adminCaregiverStatusGroup" style="display:none"><label for="adminEditStatus">Status do Cuidador</label><select id="adminEditStatus"><option value="pending">Pendente</option><option value="approved">Aprovado</option><option value="rejected">Rejeitado</option><option value="payment_pending">Pagamento Pendente</option></select></div><div class="input-group" id="adminCaregiverRatingGroup" style="display:none"><label for="adminEditRating">Avaliação do Cuidador</label><div class="rating-input"><input type="number" id="adminEditRating" min="0" max="5" step="0.1"><div class="stars" id="adminEditRatingStars"></div></div></div></div><div class="profile-section" id="adminCaregiverBioSection" style="display:none"><h4>Biografia</h4><div class="input-group"><textarea id="adminEditBio"></textarea></div></div><div class="profile-section" id="adminClientMedicationsSection" style="display:none"><h4>Medicações em Uso</h4><div id="adminEditMedicationsList"></div></div><div class="profile-section" id="adminCaregiverDocumentsSection" style="display:none"><h4>Documentos do Cuidador</h4><div class="document-preview" id="adminCaregiverProfilePhotoPreview"><strong>Foto de Perfil:</strong><img src="" alt="Foto de Perfil" style="display:none"><p style="color:var(--medium-gray);font-size:.9em">Nenhuma foto de perfil enviada.</p></div><div class="document-preview" id="adminCaregiverDocumentPreview"><strong>Documento de Identificação:</strong><img src="" alt="Documento de Identificação" style="display:none"><a href="#" target="_blank" style="display:none">Ver Documento Completo</a><p style="color:var(--medium-gray);font-size:.9em">Nenhum documento enviado.</p></div></div><button class="btn btn-save-user" id="adminSaveUserDetailsBtn">Salvar Alterações</button></div></div>
        <div id="appointmentSummaryOverlay" class="appointment-summary-overlay"><div class="appointment-summary-popup"><h3 id="summaryTitle"></h3><div class="summary-photos"><img id="summaryUserPhoto" class="summary-photo" src="" alt="Foto do Usuário" style="display:none"> <img id="summaryOtherPhoto" class="summary-photo" src="" alt="Foto do Outro" style="display:none"></div><div class="summary-details"><p><strong>Cuidador:</strong><span id="summaryCaregiverName"></span></p><p><strong>Paciente:</strong><span id="summaryClientName"></span></p><p><strong>Local:</strong><span id="summaryLocation"></span></p><p><strong>Período:</strong><span id="summaryPeriod"></span></p><p><strong>Dias:</strong><span id="summaryDays"></span></p><p><strong>Horário:</strong><span id="summaryTime"></span></p></div><a href="#" id="summaryWhatsappBtn" class="whatsapp-btn" target="_blank" style="display:none"><i class="fab fa-whatsapp"></i>Conversar no WhatsApp</a><p class="disclaimer" id="summaryDisclaimer">Lembre-se: A comunicação e questões financeiras entre paciente e cuidador são de responsabilidade dos usuários e devem ser realizadas fora do Vita Integrare. Sugerimos o WhatsApp como meio de comunicação.</p><button class="btn-ok" id="summaryOkBtn">OK</button></div></div>
        <div id="caregiverFilterOverlay" class="filter-overlay"><div class="filter-popup"><button class="close-button" id="closeCaregiverFilterPopup"><i class="fas fa-times"></i></button><h3>Filtrar Cuidadores</h3><div class="input-group"><label for="filterReligion">Religião:</label><select id="filterReligion"><option value="">Todas</option><option value="Católica">Católica</option><option value="Evangélica">Evangélica</option><option value="Espírita">Espírita</option><option value="Umbanda">Umbanda</option><option value="Candomblé">Candomblé</option><option value="Judaísmo">Judaísmo</option><option value="Islamismo">Islamismo</option><option value="Budismo">Budismo</option><option value="Hinduísmo">Hinduísmo</option><option value="Ateu">Ateu</option><option value="Outra">Outra</option><option value="Não Informar">Não Informar</option></select></div><div class="input-group"><label for="filterCity">Cidade:</label><select id="filterCity"><option value="">Todas</option></select></div><div class="input-group"><label for="filterRating">Avaliação Mínima:</label><input type="number" id="filterRating" min="0" max="5" step="0.5" value="0"></div><div class="filter-buttons"><button class="btn" id="applyCaregiverFilters">Aplicar Filtros</button><button class="btn" id="clearCaregiverFilters">Limpar Filtros</button></div></div></div>
        <div id="authScreen" class="auth-screen">
            <div class="logo-container"><div class="logo-icon"><i class="fas fa-hands-helping"></i></div><h1>Vita Integrare</h1><p>Cuidado que Conecta</p></div>
            <div class="auth-form">
                <div class="form-toggle" id="formToggle"><button class="toggle-btn active" id="loginBtn">Entrar</button><button class="toggle-btn" id="registerBtn">Cadastrar</button></div>
                <div id="userTypeSelection" style="display:none"><p class="input-group">Selecione seu perfil:</p><div class="user-type"><button class="user-type-btn active" data-type="client"><i class="fas fa-user"></i>Cliente</button><button class="user-type-btn" data-type="caregiver"><i class="fas fa-user-nurse"></i>Cuidador</button></div></div>
                <div class="input-group" id="emailInputGroup"><label for="email">E-mail</label><input type="email" id="email" placeholder="seu.email@exemplo.com"></div>
                <div class="input-group"><label for="password">Senha</label><input type="password" id="password" placeholder="••••••••"></div>
                <div id="registrationFields" style="display:none">
                    <div class="input-group"><label for="fullName">Nome Completo</label><input type="text" id="fullName" placeholder="Seu nome completo"></div>
                    <div class="input-group"><label for="dob">Data de Nascimento</label><input type="text" id="dob" placeholder="DD/MM/AAAA" maxlength="10"></div>
                    <div class="input-group"><label for="cpf">CPF</label><input type="text" id="cpf" placeholder="000.000.000-00" maxlength="14"></div>
                    <div class="input-group"><label for="phone">Telefone (WhatsApp)</label><input type="tel" id="phone" placeholder="(XX) XXXXX-XXXX" maxlength="15"></div>
                    <div class="input-group"><label for="confirmPassword">Confirmar Senha</label><input type="password" id="confirmPassword" placeholder="••••••••"></div>
                    <div class="input-group"><label for="cep">CEP</label><input type="text" id="cep" placeholder="00000-000" maxlength="9"></div>
                    <div class="input-group"><label for="state">Estado</label><select id="state"><option value="">Selecione o Estado</option></select></div>
                    <div class="input-group"><label for="city">Cidade</label><select id="city" disabled="disabled"><option value="">Selecione a Cidade</option></select></div>
                    <div class="input-group"><label for="neighborhood">Bairro</label><input type="text" id="neighborhood" placeholder="Seu bairro"></div>
                    <div class="input-group"><label for="street">Rua</label><input type="text" id="street" placeholder="Sua rua"></div>
                    <div class="input-group"><label for="number">Número</label><input type="text" id="number" placeholder="Número do logradouro"></div>
                    <div class="input-group"><label for="religion">Religião</label><select id="religion"><option value="">Selecione a Religião</option><option value="Católica">Católica</option><option value="Evangélica">Evangélica</option><option value="Espírita">Espírita</option><option value="Umbanda">Umbanda</option><option value="Candomblé">Candomblé</option><option value="Judaísmo">Judaísmo</option><option value="Islamismo">Islamismo</option><option value="Budismo">Budismo</option><option value="Hinduísmo">Hinduísmo</option><option value="Ateu">Ateu</option><option value="Outra">Outra</option><option value="Não Informar">Não Informar</option></select></div>
                    <div id="caregiverFields" style="display:none">
                        <div class="input-group"><label>Possui registro COREN?</label><div class="coren-toggle-group"><button type="button" class="coren-toggle-btn active" id="corenYesBtn" data-coren="yes">Sim</button><button type="button" class="coren-toggle-btn" id="corenNoBtn" data-coren="no">Não</button></div></div>
                        <div class="input-group" id="corenNumberGroup"><label for="coren">Número COREN</label><input type="text" id="coren" placeholder="Digite seu número COREN"></div>
                        <div class="input-group"><label for="documentUploadLabel">Documento de Identificação</label><input type="file" id="documentUpload" class="file-upload-input" accept="image/*,application/pdf"><label for="documentUpload" class="file-upload-label" id="documentUploadLabel"><i class="fas fa-upload"></i><span>Anexar Documento</span></label></div>
                        <div class="input-group"><label for="professionalPhotoUploadLabel">Foto Profissional</label><input type="file" id="professionalPhotoUpload" class="file-upload-input" accept="image/*"><label for="professionalPhotoUpload" class="file-upload-label" id="professionalPhotoUploadLabel"><i class="fas fa-upload"></i><span>Anexar Foto Profissional</span></label></div>
                    </div>
                    <div class="terms"><input type="checkbox" id="termsConsent"><label for="termsConsent">Concordo com os<a href="termos.pdf" target="_blank">Termos de Uso</a>e confirmo que as informações fornecidas são verdadeiras e estão sujeitas a análise.</label></div>
                </div>
                <button class="btn" id="authActionBtn">Entrar na Plataforma</button>
                <p id="authMessage" class="auth-message"></p>
            </div>
        </div>
        <div id="caregiverScreen" class="main-screen">
            <div class="header"><div class="header-actions"><button id="caregiverLogoutBtn" class="logout-button"><i class="fas fa-sign-out-alt"></i></button></div><div class="user-info"><div class="user-avatar" id="caregiverAvatar"><i class="fas fa-user-nurse"></i></div><div class="user-details"><div class="user-name" id="caregiverNameDisplay">Dr. Ana Silva</div><div class="user-badge">Cuidador</div><div class="user-rating"><div class="stars" id="caregiverStars"></div><span id="caregiverRatingValue">3.0</span></div></div></div><div class="welcome-message" id="caregiverWelcomeMessage">Mantenha seu perfil sempre atualizado para conseguir melhores avaliações e mais pacientes!</div></div>
            <div class="modules">
                <div class="module-card" id="caregiverProfileModule"><div class="module-header"><div class="module-icon"><i class="fas fa-user"></i></div><div class="module-title">Meu Perfil</div></div><div class="module-description">Visualize e edite suas informações pessoais, formação, experiência e disponibilidade.</div></div>
                <div class="module-card" id="caregiverPatientsModule"><div class="module-header"><div class="module-icon"><i class="fas fa-users"></i></div><div class="module-title">Agendamentos Ativos</div></div><div class="module-description">Gerencie seus pacientes e agendamentos ativos.</div><div class="appointment-list" id="caregiverPatientList"></div></div>
                <div class="module-card" id="caregiverPatientHistoryModule"><div class="module-header"><div class="module-icon"><i class="fas fa-history"></i></div><div class="module-title">Histórico de Pacientes</div></div><div class="module-description">Visualize todos os pacientes que você já atendeu.</div><div class="appointment-list" id="caregiverPatientHistoryList"></div></div>
                <div class="module-card disabled-module" id="caregiverEducaModule"><div class="module-header"><div class="module-icon"><i class="fas fa-graduation-cap"></i></div><div class="module-title">Edu-educa</div></div><div class="module-description">Cursos online e treinamentos para desenvolvimento profissional contínuo.</div></div>
            </div>
        </div>
        <div id="caregiverProfileEditScreen" class="profile-edit-screen">
            <button class="back-button" id="backToCaregiverDashboard"><i class="fas fa-arrow-left"></i></button>
            <h2>Meu Perfil - Cuidador</h2>
            <div class="profile-section">
                <h3>Informações Pessoais</h3>
                <div class="input-group"><label>Foto Profissional:</label><div class="user-avatar" style="margin:10px auto"><img id="profilePhotoPreview" src="" alt="Foto Profissional" style="display:none"><i class="fas fa-camera" id="profilePhotoIcon" style="display:block;font-size:3rem"></i></div></div>
                <p><strong>Nome Completo:</strong><span id="displayFullName"></span></p><p><strong>Data de Nascimento:</strong><span id="displayDOB"></span></p><p><strong>CPF:</strong><span id="displayCPF"></span></p><p><strong>Telefone:</strong><span id="displayPhoneCaregiver"></span></p><p><strong>COREN:</strong><span id="displayCOREN"></span></p><p><strong>Religião:</strong><span id="displayReligionCaregiver"></span></p><p><strong>Localização:</strong><span id="displayLocation"></span></p>
            </div>
            <div class="profile-section"><h3>Biografia Resumida</h3><div class="input-group"><textarea id="editBio" placeholder="Fale um pouco sobre você e sua experiência..."></textarea></div></div>
            <div class="profile-section"><h3>Formação Acadêmica e Técnica</h3><div class="input-group"><textarea id="editEducation" placeholder="Ex: Enfermeiro(a) pela Universidade X, Técnico(a) de Enfermagem pelo Senac..."></textarea></div></div>
            <div class="profile-section"><h3>Cursos de Formação Continuada</h3><div class="input-group"><textarea id="editCourses" placeholder="Ex: Curso de Primeiros Socorros, Especialização em Geriatria..."></textarea></div></div>
            <div class="profile-section"><h3>Experiências Anteriores</h3><div class="input-group"><textarea id="editExperience" placeholder="Ex: 5 anos de experiência com idosos, 2 anos com crianças..."></textarea></div></div>
            <div class="profile-section"><h3>Disponibilidade de Horários</h3><div class="input-group"><textarea id="editAvailability" placeholder="Ex: Segunda a Sexta, 8h às 18h; Finais de semana sob consulta..."></textarea></div></div>
            <div class="profile-section"><h3>Informações Adicionais</h3><div class="input-group"><textarea id="editAdditionalInfo" placeholder="Ex: Afinidade com cuidados paliativos, experiência com pacientes acamados..."></textarea></div></div>
            <button class="btn" id="saveCaregiverProfile">Salvar Alterações</button>
        </div>
        <div id="caregiverPatientDetailsScreen" class="patient-details-screen">
            <button class="back-button" id="backToCaregiverPatients"><i class="fas fa-arrow-left"></i></button>
            <h2>Detalhes do Paciente:<span id="patientDetailsName"></span></h2>
            <div class="info-item"><strong>Nome Completo:</strong><p id="patientFullName"></p></div><div class="info-item"><strong>Idade:</strong><p id="patientAge"></p></div><div class="info-item"><strong>Religião:</strong><p id="patientReligion"></p></div><div class="info-item"><strong>Endereço:</strong><p id="patientAddress"></p></div><div class="info-item"><strong style="color:var(--success)">Horário Agendado:</strong><p id="patientScheduledTime"></p></div><div class="info-item"><strong>Observação do Paciente:</strong><p id="patientObservation"></p></div>
            <div class="profile-section"><h3>Medicações em Uso</h3><div id="caregiverPatientMedicationsList"></div><button class="btn add-medication-btn" id="addCaregiverPatientMedicationBtn" style="display:none">Adicionar Medicação</button></div>
            <div class="profile-section"><h3>Notas do Cuidador para o Paciente</h3><div class="input-group"><label for="patientRoutines">Rotinas e Hábitos:</label><textarea id="patientRoutines" placeholder="Rotina diária, hábitos alimentares, sono..."></textarea></div><div class="input-group"><label for="patientSpecificCare">Cuidados e Manejos Específicos:</label><textarea id="patientSpecificCare" placeholder="Cuidados com feridas, mobilidade, higiene..."></textarea></div><div class="input-group"><label for="patientDailyRecord">Registro Diário:</label><textarea id="patientDailyRecord" placeholder="Anotações diárias sobre o estado do paciente, ocorrências..."></textarea></div><button class="btn" id="savePatientNotes">Salvar Notas do Paciente</button></div>
            <div class="patient-actions"><button class="btn btn-confirm" id="confirmAppointmentBtn">Confirmar Atendimento</button><button class="btn btn-complete" id="completeAppointmentBtn">Concluir Atendimento</button><button class="btn btn-cancel-appointment" id="cancelAppointmentBtn">Cancelar Atendimento</button><button class="btn btn-cancel-appointment" id="refuseAppointmentBtn">Recusar Atendimento</button></div>
        </div>
        <div id="caregiverPatientHistoryDetailsScreen" class="patient-details-screen">
            <button class="back-button" id="backToCaregiverPatientHistory"><i class="fas fa-arrow-left"></i></button>
            <h2>Histórico do Paciente:<span id="historyPatientDetailsName"></span></h2>
            <div class="info-item"><strong>Nome Completo:</strong><p id="historyPatientFullName"></p></div><div class="info-item"><strong>Idade:</strong><p id="historyPatientAge"></p></div><div class="info-item"><strong>Religião:</strong><p id="historyPatientReligion"></p></div><div class="info-item"><strong>Endereço:</strong><p id="historyPatientAddress"></p></div>
            <div class="profile-section"><h3>Medicações em Uso (Histórico)</h3><div id="historyPatientMedicationsList"></div></div>
            <div class="profile-section"><h3>Notas do Cuidador (Histórico)</h3><div class="input-group"><label>Rotinas e Hábitos:</label><textarea id="historyPatientRoutines" readonly="readonly"></textarea></div><div class="input-group"><label>Cuidados e Manejos Específicos:</label><textarea id="historyPatientSpecificCare" readonly="readonly"></textarea></div><div class="input-group"><label>Registro Diário:</label><textarea id="historyPatientDailyRecord" readonly="readonly"></textarea></div></div>
        </div>
        <div id="clientScreen" class="main-screen">
            <div class="header"><div class="header-actions"><button id="clientLogoutBtn" class="logout-button"><i class="fas fa-sign-out-alt"></i></button></div><div class="user-info"><div class="user-avatar" id="clientAvatar"><i class="fas fa-user"></i></div><div class="user-details"><div class="user-name" id="clientNameDisplay">Sra. Marta Costa</div><div class="user-badge">Cliente</div></div></div><div class="welcome-message">Bem-vindo(a) à Vita Integrare! Use os botões abaixo para agendar um atendimento, editar seu perfil ou falar com nossos representantes.</div></div>
            <div class="modules">
                <div class="module-card" id="clientProfileModule"><div class="module-header"><div class="module-icon"><i class="fas fa-user"></i></div><div class="module-title">Meu Perfil</div></div><div class="module-description">Visualize e edite suas informações pessoais, medicamentos e necessidades específicas.</div></div>
                <div class="module-card" id="clientAppointmentsModule">
                    <div class="module-header"><div class="module-icon"><i class="fas fa-calendar-plus"></i></div><div class="module-title">Agendamentos</div></div>
                    <div class="module-description">Encontre e agende cuidadores disponíveis para atender suas necessidades.</div>
                    <div class="caregiver-carousel-container" id="caregiverCarouselContainer">
                        <button class="filter-button" id="openCaregiverFilterPopup"><i class="fas fa-filter"></i></button>
                        <div class="caregiver-carousel-inner" id="caregiverCarousel"></div>
                        <div class="caregiver-carousel-nav"><button class="nav-btn" id="prevCaregiverBtn"><i class="fas fa-arrow-left"></i></button><button class="nav-btn" id="nextCaregiverBtn"><i class="fas fa-arrow-right"></i></button></div>
                    </div>
                    <button class="btn" id="interestCaregiverBtn" style="margin-top:20px">Tenho interesse nesse cuidador</button>
                </div>
                <div class="module-card" id="clientRequestsHistoryModule"><div class="module-header"><div class="module-icon"><i class="fas fa-clipboard-list"></i></div><div class="module-title">Minhas Solicitações</div></div><div class="module-description">Acompanhe o status dos seus pedidos de agendamento.</div></div>
            </div>
        </div>
        <div id="clientProfileEditScreen" class="profile-edit-screen">
            <button class="back-button" id="backToClientDashboard"><i class="fas fa-arrow-left"></i></button>
            <h2>Meu Perfil - Cliente</h2>
            <div class="profile-section">
                <h3>Informações Pessoais</h3>
                <div class="input-group"><label>Foto de Perfil:</label><div class="user-avatar" style="margin:10px auto"><img id="clientProfilePhotoPreview" src="" alt="Foto de Perfil" style="display:none"><i class="fas fa-camera" id="clientProfilePhotoIcon" style="display:block;font-size:3rem"></i></div></div>
                <p><strong>Nome Completo:</strong><span id="clientDisplayFullName"></span></p><p><strong>CPF:</strong><span id="clientDisplayCPF"></span></p><p><strong>Telefone:</strong><span id="clientDisplayPhone"></span></p><p><strong>E-mail:</strong><span id="clientDisplayEmail"></span></p><p><strong>Religião:</strong><span id="clientDisplayReligion"></span></p><p><strong>Endereço:</strong><span id="clientDisplayAddress"></span></p>
            </div>
            <div class="profile-section"><h3>Medicações em Uso</h3><div id="clientMedicationsList"></div><button class="btn add-medication-btn" id="addClientMedicationBtn">Adicionar Medicação</button></div>
            <div class="profile-section"><h3>Recomendações e Necessidades Específicas</h3><div class="input-group"><textarea id="editClientRecommendations" placeholder="Descreva quaisquer recomendações médicas ou necessidades especiais..."></textarea></div></div>
            <button class="btn" id="saveClientProfile">Salvar Alterações</button>
        </div>
        <div id="scheduleCaregiverScreen" class="schedule-caregiver-screen">
            <button class="back-button" id="backToCaregiverCarousel"><i class="fas fa-arrow-left"></i></button>
            <h2>Agendar Cuidador</h2>
            <div class="caregiver-info-summary"><div class="avatar"><img id="selectedCaregiverAvatar" src="" alt="Foto do Cuidador" style="display:none"><i class="fas fa-user-nurse" id="selectedCaregiverIcon"></i></div><div class="details"><div class="name" id="selectedCaregiverName"></div><div class="rating" id="selectedCaregiverRating"></div></div></div>
            <div class="form-section"><h3>Período do Atendimento</h3><div class="input-group"><label for="startDate">Data de Início:</label><input type="text" id="startDate" inputmode="numeric" pattern="\d{2}/\d{2}/\d{4}" placeholder="DD/MM/AAAA"></div><div class="input-group"><label for="endDate">Data de Término:</label><input type="text" id="endDate" inputmode="numeric" pattern="\d{2}/\d{2}/\d{4}" placeholder="DD/MM/AAAA"></div></div>
            <div class="form-section"><h3>Dias da Semana</h3><div class="day-selection"><button type="button" class="day-button" data-day="Segunda">Segunda</button><button type="button" class="day-button" data-day="Terça">Terça</button><button type="button" class="day-button" data-day="Quarta">Quarta</button><button type="button" class="day-button" data-day="Quinta">Quinta</button><button type="button" class="day-button" data-day="Sexta">Sexta</button><button type="button" class="day-button" data-day="Sábado">Sábado</button><button type="button" class="day-button" data-day="Domingo">Domingo</button></div></div>
            <div class="form-section"><h3>Horário Diário</h3><div class="time-selection"><div class="input-group"><label for="startTime">Início:</label><input type="text" id="startTime" inputmode="numeric" pattern="\d{2}:\d{2}" placeholder="HH:MM"></div><div class="input-group"><label for="endTime">Fim:</label><input type="text" id="endTime" inputmode="numeric" pattern="\d{2}:\d{2}" placeholder="HH:MM"></div></div></div>
            <div class="form-section"><h3>Observação (Opcional):</h3><div class="input-group"><textarea id="scheduleObservation" placeholder="Ex: Necessita de ajuda para banho, acompanhamento em consulta..."></textarea></div></div>
            <button class="btn" id="confirmScheduleBtn">Confirmar Agendamento</button>
        </div>
        <div id="clientRequestsHistoryScreen" class="client-requests-history-screen">
            <button class="back-button" id="backToClientDashboardFromRequests"><i class="fas fa-arrow-left"></i></button>
            <h2>Minhas Solicitações</h2>
            <div class="client-requests-list" id="clientRequestsList"></div>
            <div class="pagination-controls"><button id="prevRequestPageBtn" disabled="disabled">Anterior</button><button id="nextRequestPageBtn" disabled="disabled">Próximo</button></div>
        </div>
        <div id="clientRequestDetailsScreen" class="client-request-details-screen">
            <button class="back-button" id="backToClientRequestsHistory"><i class="fas fa-arrow-left"></i></button>
            <h2>Detalhes da Solicitação</h2>
            <div class="caregiver-summary"><div class="avatar"><img id="requestCaregiverAvatar" src="" alt="Foto do Cuidador" style="display:none"><i class="fas fa-user-nurse" id="requestCaregiverIcon"></i></div><div class="details"><div class="name" id="requestCaregiverName"></div><div class="rating" id="requestCaregiverRating"></div></div></div>
            <div class="info-item"><strong>Status:</strong><p id="requestStatus"></p></div><div class="info-item"><strong>Período:</strong><p id="requestPeriod"></p></div><div class="info-item"><strong>Dias da Semana:</strong><p id="requestDays"></p></div><div class="info-item"><strong>Horário:</strong><p id="requestTime"></p></div><div class="info-item"><strong>Observação:</strong><p id="requestObservation"></p></div>
            <div class="profile-section"><h3>Biografia do Cuidador</h3><p id="requestCaregiverBio"></p></div>
            <div class="profile-section"><h3>Notas do Cuidador (se houver)</h3><p id="requestCaregiverNotes"></p></div>
        </div>
        <div id="adminScreen" class="main-screen">
            <div class="header"><div class="header-actions"><button id="adminLogoutBtn" class="logout-button"><i class="fas fa-sign-out-alt"></i></button></div><div class="user-info"><div class="user-avatar"><i class="fas fa-user-shield"></i></div><div class="user-details"><div class="user-name">Administrador</div><div class="user-badge">Admin</div></div></div><div class="welcome-message">Bem-vindo, Administrador! Gerencie usuários e agendamentos da plataforma.</div></div>
            <div class="modules">
                <div class="module-card" id="adminPendingCaregiversModule">
                    <div class="module-header"><div class="module-icon"><i class="fas fa-user-clock"></i></div><div class="module-title">Cuidadores Pendentes</div></div>
                    <div class="module-description">Aprove ou rejeite novos cadastros de cuidadores.</div>
                    <div class="admin-section" style="margin:1rem 0 0 0;padding:1rem"><ul id="pendingCaregiversList" class="admin-list"></ul><div class="pagination-controls"><button id="prevPendingCaregiverPageBtn" disabled="disabled">Anterior</button><button id="nextPendingCaregiverPageBtn" disabled="disabled">Próximo</button></div></div>
                </div>
                <div class="module-card" id="adminUserManagementModule">
                    <div class="module-header"><div class="module-icon"><i class="fas fa-users-cog"></i></div><div class="module-title">Gerenciar Usuários</div></div>
                    <div class="module-description">Visualize e edite informações de todos os clientes e cuidadores.</div>
                    <div class="admin-section" style="margin:1rem 0 0 0;padding:1rem">
                        <div class="input-group"><label for="adminUserSearch">Pesquisar Usuário:</label><input type="text" id="adminUserSearch" placeholder="E-mail, Nome ou CPF"></div>
                        <div class="admin-user-type-toggle"><button id="showCaregiversBtn" class="active">Cuidadores</button><button id="showClientsBtn">Clientes</button></div>
                        <div class="admin-user-list-container" id="adminUserListContainer"></div>
                        <div class="pagination-controls"><button id="prevUserPageBtn" disabled="disabled">Anterior</button><button id="nextUserPageBtn" disabled="disabled">Próximo</button></div>
                    </div>
                </div>
                <div class="module-card" id="adminChartsModule">
                    <div class="module-header"><div class="module-icon"><i class="fas fa-chart-bar"></i></div><div class="module-title">Estatísticas e Gráficos</div></div>
                    <div class="module-description">Acompanhe métricas importantes sobre agendamentos e usuários.</div>
                    <div class="charts-container"><div class="chart-card"><h3>Status dos Agendamentos</h3><canvas id="appointmentStatusChart"></canvas></div><div class="chart-card"><h3>Agendamentos por Mês</h3><canvas id="appointmentsPerMonthChart"></canvas></div></div>
                </div>
                <div class="module-card" id="adminBackupRestoreModule">
                    <div class="module-header"><div class="module-icon"><i class="fas fa-database"></i></div><div class="module-title">Backup e Restauração</div></div>
                    <div class="module-description">Faça backup ou restaure os dados do Firestore.</div>
                    <div class="admin-section" style="margin:1rem 0 0 0;padding:1rem"><button class="btn" id="backupDataBtn" style="margin-bottom:1rem">Fazer Backup</button><input type="file" id="restoreFileInput" accept=".json" style="display:none"><button class="btn" id="restoreDataBtn">Restaurar Dados</button></div>
                </div>
            </div>
        </div>
    </div>
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-storage-compat.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/locales/pt-br.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/sw.js')
                    .then(reg => console.log('Service Worker registrado com sucesso:', reg))
                    .catch(err => console.error('Falha ao registrar Service Worker:', err));
            });
        }
        const firebaseConfig = {
            apiKey: "AIzaSyB8MtoEA9DNeQOR-CYDfjCAIEFUfpWvg8o",
            authDomain: "vitaintegrare.firebaseapp.com",
            projectId: "vitaintegrare",
            storageBucket: "vitaintegrare.firebasestorage.app",
            messagingSenderId: "138494228136",
            appId: "1:138494228136:web:729d9fac1ae365af72b49d",
            measurementId: "G-NQYCL90H73"
        };
        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();
        const db = firebase.firestore();
        const storage = firebase.storage();
        const IMGUR_CLIENT_ID = '4ae8b96c539d446';
        let currentUser = null;
        let currentUserType = null;
        let currentCaregiverData = null;
        let currentClientData = null;
        let allCaregivers = [];
        let filteredCaregivers = [];
        let currentCaregiverIndex = 0;
        let selectedCaregiverForScheduling = null;
        let hasCoren = true;
        let screenHistory = [];
        let currentAppointments = [];
        let currentSelectedAppointment = null;
        let unsubscribeAppointments = null;
        let unsubscribeAdminPendingCaregivers = null;
        let unsubscribeAdminAllUsers = null;
        let unsubscribeCaregiverData = null;
        let unsubscribeClientData = null;
        const REQUESTS_PER_PAGE = 3;
        let clientRequests = [];
        let currentRequestPage = 0;
        const ADMIN_USERS_PER_PAGE = 5;
        let pendingCaregivers = [];
        let currentPendingCaregiverPage = 0;
        let allUsers = [];
        let currentAdminUserPage = 0;
        let currentAdminUserTypeFilter = 'caregiver';
        let adminUserSearchQuery = '';
        let caregiverFilterReligion = '';
        let caregiverFilterCity = '';
        let caregiverFilterRating = 0;
        let appointmentStatusChart = null;
        let appointmentsPerMonthChart = null;
        const appContainer = document.querySelector('.app-container');
        const authScreen = document.getElementById('authScreen');
        const caregiverScreen = document.getElementById('caregiverScreen');
        const clientScreen = document.getElementById('clientScreen');
        const caregiverProfileEditScreen = document.getElementById('caregiverProfileEditScreen');
        const caregiverPatientDetailsScreen = document.getElementById('caregiverPatientDetailsScreen');
        const caregiverPatientHistoryDetailsScreen = document.getElementById('caregiverPatientHistoryDetailsScreen');
        const clientProfileEditScreen = document.getElementById('clientProfileEditScreen');
        const scheduleCaregiverScreen = document.getElementById('scheduleCaregiverScreen');
        const clientRequestsHistoryScreen = document.getElementById('clientRequestsHistoryScreen');
        const clientRequestDetailsScreen = document.getElementById('clientRequestDetailsScreen');
        const adminScreen = document.getElementById('adminScreen');
        const loginBtn = document.getElementById('loginBtn');
        const registerBtn = document.getElementById('registerBtn');
        const authActionBtn = document.getElementById('authActionBtn');
        const userTypeSelection = document.getElementById('userTypeSelection');
        const userTypeBtns = document.querySelectorAll('.user-type-btn');
        const caregiverFields = document.getElementById('caregiverFields');
        const corenYesBtn = document.getElementById('corenYesBtn');
        const corenNoBtn = document.getElementById('corenNoBtn');
        const corenNumberGroup = document.getElementById('corenNumberGroup');
        const authMessage = document.getElementById('authMessage');
        const registrationFields = document.getElementById('registrationFields');
        const formToggle = document.getElementById('formToggle');
        const fullNameInput = document.getElementById('fullName');
        const dobInput = document.getElementById('dob');
        const cpfInput = document.getElementById('cpf');
        const phoneInput = document.getElementById('phone');
        const emailInput = document.getElementById('email');
        const passwordInput = document.getElementById('password');
        const confirmPasswordInput = document.getElementById('confirmPassword');
        const cepInput = document.getElementById('cep');
        const stateSelect = document.getElementById('state');
        const citySelect = document.getElementById('city');
        const neighborhoodInput = document.getElementById('neighborhood');
        const streetInput = document.getElementById('street');
        const numberInput = document.getElementById('number');
        const religionSelect = document.getElementById('religion');
        const corenInput = document.getElementById('coren');
        const documentUploadInput = document.getElementById('documentUpload');
        const documentUploadLabel = document.getElementById('documentUploadLabel');
        const professionalPhotoUploadInput = document.getElementById('professionalPhotoUpload');
        const professionalPhotoUploadLabel = document.getElementById('professionalPhotoUploadLabel');
        const termsConsentCheckbox = document.getElementById('termsConsent');
        const emailInputGroup = document.getElementById('emailInputGroup');
        const caregiverNameDisplay = document.getElementById('caregiverNameDisplay');
        const caregiverAvatar = document.getElementById('caregiverAvatar');
        const caregiverStars = document.getElementById('caregiverStars');
        const caregiverRatingValue = document.getElementById('caregiverRatingValue');
        const caregiverProfileModule = document.getElementById('caregiverProfileModule');
        const caregiverPatientsModule = document.getElementById('caregiverPatientsModule');
        const caregiverPatientList = document.getElementById('caregiverPatientList');
        const caregiverPatientHistoryModule = document.getElementById('caregiverPatientHistoryModule');
        const caregiverPatientHistoryList = document.getElementById('caregiverPatientHistoryList');
        const caregiverLogoutBtn = document.getElementById('caregiverLogoutBtn');
        const caregiverWelcomeMessage = document.getElementById('caregiverWelcomeMessage');
        const caregiverEducaModule = document.getElementById('caregiverEducaModule');
        const backToCaregiverDashboardBtn = document.getElementById('backToCaregiverDashboard');
        const profilePhotoPreview = document.getElementById('profilePhotoPreview');
        const profilePhotoIcon = document.getElementById('profilePhotoIcon');
        const displayFullName = document.getElementById('displayFullName');
        const displayDOB = document.getElementById('displayDOB');
        const displayCPF = document.getElementById('displayCPF');
        const displayPhoneCaregiver = document.getElementById('displayPhoneCaregiver');
        const displayCOREN = document.getElementById('displayCOREN');
        const displayReligionCaregiver = document.getElementById('displayReligionCaregiver');
        const displayLocation = document.getElementById('displayLocation');
        const editBio = document.getElementById('editBio');
        const editEducation = document.getElementById('editEducation');
        const editCourses = document.getElementById('editCourses');
        const editExperience = document.getElementById('editExperience');
        const editAvailability = document.getElementById('editAvailability');
        const editAdditionalInfo = document.getElementById('editAdditionalInfo');
        const saveCaregiverProfileBtn = document.getElementById('saveCaregiverProfile');
        const backToCaregiverPatientsBtn = document.getElementById('backToCaregiverPatients');
        const patientDetailsName = document.getElementById('patientDetailsName');
        const patientFullName = document.getElementById('patientFullName');
        const patientAge = document.getElementById('patientAge');
        const patientReligion = document.getElementById('patientReligion');
        const patientAddress = document.getElementById('patientAddress');
        const patientScheduledTime = document.getElementById('patientScheduledTime');
        const patientObservation = document.getElementById('patientObservation');
        const caregiverPatientMedicationsList = document.getElementById('caregiverPatientMedicationsList');
        const addCaregiverPatientMedicationBtn = document.getElementById('addCaregiverPatientMedicationBtn');
        const patientRoutines = document.getElementById('patientRoutines');
        const patientSpecificCare = document.getElementById('patientSpecificCare');
        const patientDailyRecord = document.getElementById('patientDailyRecord');
        const savePatientNotesBtn = document.getElementById('savePatientNotes');
        const confirmAppointmentBtn = document.getElementById('confirmAppointmentBtn');
        const completeAppointmentBtn = document.getElementById('completeAppointmentBtn');
        const cancelAppointmentBtn = document.getElementById('cancelAppointmentBtn');
        const refuseAppointmentBtn = document.getElementById('refuseAppointmentBtn');
        const backToCaregiverPatientHistoryBtn = document.getElementById('backToCaregiverPatientHistory');
        const historyPatientDetailsName = document.getElementById('historyPatientDetailsName');
        const historyPatientFullName = document.getElementById('historyPatientFullName');
        const historyPatientAge = document.getElementById('historyPatientAge');
        const historyPatientReligion = document.getElementById('historyPatientReligion');
        const historyPatientAddress = document.getElementById('historyPatientAddress');
        const historyPatientMedicationsList = document.getElementById('historyPatientMedicationsList');
        const historyPatientRoutines = document.getElementById('historyPatientRoutines');
        const historyPatientSpecificCare = document.getElementById('historyPatientSpecificCare');
        const historyPatientDailyRecord = document.getElementById('historyPatientDailyRecord');
        const clientNameDisplay = document.getElementById('clientNameDisplay');
        const clientAvatar = document.getElementById('clientAvatar');
        const clientProfileModule = document.getElementById('clientProfileModule');
        const clientAppointmentsModule = document.getElementById('clientAppointmentsModule');
        const caregiverCarousel = document.getElementById('caregiverCarousel');
        const prevCaregiverBtn = document.getElementById('prevCaregiverBtn');
        const nextCaregiverBtn = document.getElementById('nextCaregiverBtn');
        const interestCaregiverBtn = document.getElementById('interestCaregiverBtn');
        const clientLogoutBtn = document.getElementById('clientLogoutBtn');
        const clientRequestsHistoryModule = document.getElementById('clientRequestsHistoryModule');
        const backToClientDashboardBtn = document.getElementById('backToClientDashboard');
        const clientProfilePhotoPreview = document.getElementById('clientProfilePhotoPreview');
        const clientProfilePhotoIcon = document.getElementById('clientProfilePhotoIcon');
        const clientDisplayFullName = document.getElementById('clientDisplayFullName');
        const clientDisplayCPF = document.getElementById('clientDisplayCPF');
        const clientDisplayPhone = document.getElementById('clientDisplayPhone');
        const clientDisplayEmail = document.getElementById('clientDisplayEmail');
        const clientDisplayReligion = document.getElementById('clientDisplayReligion');
        const clientDisplayAddress = document.getElementById('clientDisplayAddress');
        const clientMedicationsList = document.getElementById('clientMedicationsList');
        const addClientMedicationBtn = document.getElementById('addClientMedicationBtn');
        const editClientRecommendations = document.getElementById('editClientRecommendations');
        const saveClientProfileBtn = document.getElementById('saveClientProfile');
        const backToCaregiverCarouselBtn = document.getElementById('backToCaregiverCarousel');
        const selectedCaregiverAvatar = document.getElementById('selectedCaregiverAvatar');
        const selectedCaregiverIcon = document.getElementById('selectedCaregiverIcon');
        const selectedCaregiverName = document.getElementById('selectedCaregiverName');
        const selectedCaregiverRating = document.getElementById('selectedCaregiverRating');
        const startDateInput = document.getElementById('startDate');
        const endDateInput = document.getElementById('endDate');
        const dayButtons = document.querySelectorAll('.day-button');
        const startTimeInput = document.getElementById('startTime');
        const endTimeInput = document.getElementById('endTime');
        const scheduleObservationInput = document.getElementById('scheduleObservation');
        const confirmScheduleBtn = document.getElementById('confirmScheduleBtn');
        const backToClientDashboardFromRequestsBtn = document.getElementById('backToClientDashboardFromRequests');
        const clientRequestsList = document.getElementById('clientRequestsList');
        const prevRequestPageBtn = document.getElementById('prevRequestPageBtn');
        const nextRequestPageBtn = document.getElementById('nextRequestPageBtn');
        const backToClientRequestsHistoryBtn = document.getElementById('backToClientRequestsHistory');
        const requestCaregiverAvatar = document.getElementById('requestCaregiverAvatar');
        const requestCaregiverIcon = document.getElementById('requestCaregiverIcon');
        const requestCaregiverName = document.getElementById('requestCaregiverName');
        const requestCaregiverRating = document.getElementById('requestCaregiverRating');
        const requestStatus = document.getElementById('requestStatus');
        const requestPeriod = document.getElementById('requestPeriod');
        const requestDays = document.getElementById('requestDays');
        const requestTime = document.getElementById('requestTime');
        const requestObservation = document.getElementById('requestObservation');
        const requestCaregiverBio = document.getElementById('requestCaregiverBio');
        const requestCaregiverNotes = document.getElementById('requestCaregiverNotes');
        const customAlertOverlay = document.getElementById('customAlertOverlay');
        const customAlertTitle = document.getElementById('customAlertTitle');
        const customAlertMessage = document.getElementById('customAlertMessage');
        const customAlertOkBtn = document.getElementById('customAlertOkBtn');
        const customAlertCancelBtn = document.getElementById('customAlertCancelBtn');
        const adminLogoutBtn = document.getElementById('adminLogoutBtn');
        const pendingCaregiversList = document.getElementById('pendingCaregiversList');
        const prevPendingCaregiverPageBtn = document.getElementById('prevPendingCaregiverPageBtn');
        const nextPendingCaregiverPageBtn = document.getElementById('nextPendingCaregiverPageBtn');
        const adminUserManagementModule = document.getElementById('adminUserManagementModule');
        const adminUserSearchInput = document.getElementById('adminUserSearch');
        const showCaregiversBtn = document.getElementById('showCaregiversBtn');
        const showClientsBtn = document.getElementById('showClientsBtn');
        const adminUserListContainer = document.getElementById('adminUserListContainer');
        const prevUserPageBtn = document.getElementById('prevUserPageBtn');
        const nextUserPageBtn = document.getElementById('nextUserPageBtn');
        const adminUserDetailsOverlay = document.getElementById('adminUserDetailsOverlay');
        const closeAdminUserDetailsPopupBtn = document.getElementById('closeAdminUserDetailsPopup');
        const adminUserDetailsTitle = document.getElementById('adminUserDetailsTitle');
        const adminEditFullName = document.getElementById('adminEditFullName');
        const adminEditEmail = document.getElementById('adminEditEmail');
        const adminEditPhone = document.getElementById('adminEditPhone');
        const adminEditCpf = document.getElementById('adminEditCpf');
        const adminEditReligion = document.getElementById('adminEditReligion');
        const adminEditAddress = document.getElementById('adminEditAddress');
        const adminCaregiverStatusGroup = document.getElementById('adminCaregiverStatusGroup');
        const adminEditStatus = document.getElementById('adminEditStatus');
        const adminCaregiverRatingGroup = document.getElementById('adminCaregiverRatingGroup');
        const adminEditRating = document.getElementById('adminEditRating');
        const adminEditRatingStars = document.getElementById('adminEditRatingStars');
        const adminCaregiverBioSection = document.getElementById('adminCaregiverBioSection');
        const adminEditBio = document.getElementById('adminEditBio');
        const adminClientMedicationsSection = document.getElementById('adminClientMedicationsSection');
        const adminEditMedicationsList = document.getElementById('adminEditMedicationsList');
        const adminCaregiverDocumentsSection = document.getElementById('adminCaregiverDocumentsSection');
        const adminCaregiverProfilePhotoPreview = document.querySelector('#adminCaregiverDocumentsSection #adminCaregiverProfilePhotoPreview img');
        const adminCaregiverProfilePhotoText = document.querySelector('#adminCaregiverDocumentsSection #adminCaregiverProfilePhotoPreview p');
        const adminCaregiverDocumentPreview = document.querySelector('#adminCaregiverDocumentsSection #adminCaregiverDocumentPreview img');
        const adminCaregiverDocumentLink = document.querySelector('#adminCaregiverDocumentsSection #adminCaregiverDocumentPreview a');
        const adminCaregiverDocumentText = document.querySelector('#adminCaregiverDocumentsSection #adminCaregiverDocumentPreview p');
        const adminSaveUserDetailsBtn = document.getElementById('adminSaveUserDetailsBtn');
        const appointmentStatusChartCtx = document.getElementById('appointmentStatusChart')?.getContext('2d');
        const appointmentsPerMonthChartCtx = document.getElementById('appointmentsPerMonthChart')?.getContext('2d');
        const appointmentSummaryOverlay = document.getElementById('appointmentSummaryOverlay');
        const appointmentSummaryPopup = document.getElementById('appointmentSummaryPopup');
        const summaryTitle = document.getElementById('summaryTitle');
        const summaryUserPhoto = document.getElementById('summaryUserPhoto');
        const summaryOtherPhoto = document.getElementById('summaryOtherPhoto');
        const summaryCaregiverName = document.getElementById('summaryCaregiverName');
        const summaryClientName = document.getElementById('summaryClientName');
        const summaryLocation = document.getElementById('summaryLocation');
        const summaryPeriod = document.getElementById('summaryPeriod');
        const summaryDays = document.getElementById('summaryDays');
        const summaryTime = document.getElementById('summaryTime');
        const summaryWhatsappBtn = document.getElementById('summaryWhatsappBtn');
        const summaryOkBtn = document.getElementById('summaryOkBtn');
        const summaryDisclaimer = document.getElementById('summaryDisclaimer');
        const photoOptionsOverlay = document.getElementById('photoOptionsOverlay');
        const closePhotoOptionsPopup = document.getElementById('closePhotoOptionsPopup');
        const viewPhotoBtn = document.getElementById('viewPhotoBtn');
        const editPhotoBtn = document.getElementById('editPhotoBtn');
        const photoUploadInput = document.getElementById('photoUploadInput');
        const photoViewOverlay = document.getElementById('photoViewOverlay');
        const closePhotoViewPopup = document.getElementById('closePhotoViewPopup');
        const photoViewImage = document.getElementById('photoViewImage');
        const backupDataBtn = document.getElementById('backupDataBtn');
        const restoreDataBtn = document.getElementById('restoreDataBtn');
        const restoreFileInput = document.getElementById('restoreFileInput');
        const openCaregiverFilterPopupBtn = document.getElementById('openCaregiverFilterPopup');
        const caregiverFilterOverlay = document.getElementById('caregiverFilterOverlay');
        const closeCaregiverFilterPopupBtn = document.getElementById('closeCaregiverFilterPopup');
        const filterReligionSelect = document.getElementById('filterReligion');
        const filterCitySelect = document.getElementById('filterCity');
        const filterRatingInput = document.getElementById('filterRating');
        const applyCaregiverFiltersBtn = document.getElementById('applyCaregiverFilters');
        const clearCaregiverFiltersBtn = document.getElementById('clearCaregiverFilters');
        function showScreen(screenId) {
            const screens = [
                authScreen, caregiverScreen, clientScreen, caregiverProfileEditScreen,
                caregiverPatientDetailsScreen, caregiverPatientHistoryDetailsScreen,
                clientProfileEditScreen, scheduleCaregiverScreen, clientRequestsHistoryScreen,
                clientRequestDetailsScreen, adminScreen
            ];
            const currentScreen = screens.find(screen => screen.style.display === 'flex');
            if (currentScreen && currentScreen.id !== screenId) {
                screenHistory.push(currentScreen.id);
            }
            screens.forEach(screen => {
                if (screen.id === screenId) {
                    screen.style.display = 'flex';
                    screen.classList.add('fade-in');
                    window.scrollTo(0, 0);
                } else {
                    screen.style.display = 'none';
                    screen.classList.remove('fade-in');
                }
            });
        }
        function goBack() {
            if (screenHistory.length > 0) {
                const prevScreenId = screenHistory.pop();
                const screens = [
                    authScreen, caregiverScreen, clientScreen, caregiverProfileEditScreen,
                    caregiverPatientDetailsScreen, caregiverPatientHistoryDetailsScreen,
                    clientProfileEditScreen, scheduleCaregiverScreen, clientRequestsHistoryScreen,
                    clientRequestDetailsScreen, adminScreen
                ];
                screens.forEach(screen => {
                    if (screen.id === prevScreenId) {
                        screen.style.display = 'flex';
                        screen.classList.add('fade-in');
                        window.scrollTo(0, 0);
                    } else {
                        screen.style.display = 'none';
                        screen.classList.remove('fade-in');
                    }
                });
            }
        }
        document.querySelectorAll('.back-button').forEach(button => {
            button.addEventListener('click', goBack);
        });
        function displayStars(rating, element) {
            element.innerHTML = '';
            const fullStars = Math.floor(rating);
            const halfStar = rating % 1 >= 0.5;
            const emptyStars = 5 - fullStars - (halfStar ? 1 : 0);
            for (let i = 0; i < fullStars; i++) {
                element.innerHTML += '<i class="fas fa-star"></i>';
            }
            if (halfStar) {
                element.innerHTML += '<i class="fas fa-star-half-alt"></i>';
            }
            for (let i = 0; i < emptyStars; i++) {
                element.innerHTML += '<i class="far fa-star"></i>';
            }
        }
        async function uploadImageToImgur(file) {
            if (!file) {
                console.warn("Nenhum arquivo fornecido para upload.");
                return null;
            }
            const formData = new FormData();
            formData.append('image', file);
            try {
                const response = await fetch('https://api.imgur.com/3/image', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Client-ID ${IMGUR_CLIENT_ID}`,
                    },
                    body: formData
                });
                if (!response.ok) {
                    const errorData = await response.json();
                    console.error("Erro na resposta do Imgur:", errorData);
                    throw new Error(`Falha no upload do Imgur: ${errorData.data.error || response.statusText}`);
                }
                const data = await response.json();
                return data.data.link;
            } catch (error) {
                console.error("Erro ao fazer upload para o Imgur:", error);
                throw new Error(`Erro ao fazer upload da imagem: ${error.message}`);
            }
        }
        function showAlert(title, message) {
            return new Promise(resolve => {
                customAlertTitle.textContent = title;
                customAlertMessage.textContent = message;
                customAlertCancelBtn.style.display = 'none';
                customAlertOkBtn.textContent = 'OK';
                customAlertOkBtn.onclick = () => {
                    customAlertOverlay.classList.remove('show');
                    resolve(true);
                };
                customAlertOverlay.classList.add('show');
            });
        }
        function showConfirm(title, message) {
            return new Promise(resolve => {
                customAlertTitle.textContent = title;
                customAlertMessage.textContent = message;
                customAlertCancelBtn.style.display = 'inline-block';
                customAlertOkBtn.textContent = 'Confirmar';
                customAlertCancelBtn.textContent = 'Cancelar';
                customAlertOkBtn.onclick = () => {
                    customAlertOverlay.classList.remove('show');
                    resolve(true);
                };
                customAlertCancelBtn.onclick = () => {
                    customAlertOverlay.classList.remove('show');
                    resolve(false);
                };
                customAlertOverlay.classList.add('show');
            });
        }
        function formatDateToDisplay(isoDateString) {
            if (!isoDateString) return '';
            const date = new Date(isoDateString + 'T00:00:00');
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();
            return `${day}/${month}/${year}`;
        }
        function formatDateToISO(displayDateString) {
            if (!displayDateString) return '';
            const [day, month, year] = displayDateString.split('/');
            return `${year}-${month}-${day}`;
        }
        function maskDate(value) {
            value = value.replace(/\D/g, "");
            value = value.replace(/(\d{2})(\d)/, "$1/$2");
            value = value.replace(/(\d{2})(\d)/, "$1/$2");
            return value;
        }
        function maskTime(value) {
            value = value.replace(/\D/g, "");
            value = value.replace(/(\d{2})(\d)/, "$1:$2");
            return value;
        }
        function maskCPF(value) {
            value = value.replace(/\D/g, "");
            value = value.replace(/(\d{3})(\d)/, "$1.$2");
            value = value.replace(/(\d{3})(\d)/, "$1.$2");
            value = value.replace(/(\d{3})(\d{1,2})$/, "$1-$2");
            return value;
        }
        function maskPhone(value) {
            value = value.replace(/\D/g, "");
            if (value.length > 10) {
                value = value.replace(/^(\d{2})(\d{5})(\d{4}).*/, "($1) $2-$3");
            } else if (value.length > 5) {
                value = value.replace(/^(\d{2})(\d{4})(\d{0,4}).*/, "($1) $2-$3");
            } else if (value.length > 2) {
                value = value.replace(/^(\d*)/, "($1");
            } else {
                value = value.replace(/^(\d*)/, "($1");
            }
            return value;
        }
        function maskCEP(value) {
            value = value.replace(/\D/g, "");
            value = value.replace(/^(\d{5})(\d)/, "$1-$2");
            return value;
        }
        cpfInput.addEventListener('input', (e) => {
            e.target.value = maskCPF(e.target.value);
        });
        phoneInput.addEventListener('input', (e) => {
            e.target.value = maskPhone(e.target.value);
        });
        cepInput.addEventListener('input', (e) => {
            e.target.value = maskCEP(e.target.value);
        });
        dobInput.addEventListener('input', (e) => {
            e.target.value = maskDate(e.target.value);
        });
        startDateInput.addEventListener('input', (e) => {
            e.target.value = maskDate(e.target.value);
        });
        endDateInput.addEventListener('input', (e) => {
            e.target.value = maskDate(e.target.value);
        });
        startTimeInput.addEventListener('input', (e) => {
            e.target.value = maskTime(e.target.value);
        });
        endTimeInput.addEventListener('input', (e) => {
            e.target.value = maskTime(e.target.value);
        });
        cepInput.addEventListener('blur', async () => {
            const cep = cepInput.value.replace(/\D/g, '');
            if (cep.length === 8) {
                authMessage.textContent = 'Buscando CEP...';
                authMessage.classList.add('loading-message');
                try {
                    const response = await fetch(`https://viacep.com.br/ws/${cep}/json/`);
                    const data = await response.json();
                    if (!data.erro) {
                        streetInput.value = data.logradouro;
                        neighborhoodInput.value = data.bairro;
                        if (stateSelect.options.length <= 1) {
                            await loadStates();
                        }
                        const stateOption = Array.from(stateSelect.options).find(option => option.value === data.uf);
                        if (stateOption) {
                            stateSelect.value = stateOption.value;
                            await loadCitiesByState(stateSelect.value);
                            citySelect.value = data.localidade;
                        }
                        authMessage.textContent = '';
                        authMessage.classList.remove('loading-message');
                    } else {
                        showAlert('Erro no CEP', 'CEP não encontrado.');
                        authMessage.textContent = '';
                        authMessage.classList.remove('loading-message');
                        clearAddressFields();
                    }
                } catch (error) {
                    console.error('Erro ao buscar CEP:', error);
                    showAlert('Erro', 'Erro ao buscar CEP. Tente novamente.');
                    authMessage.textContent = '';
                    authMessage.classList.remove('loading-message');
                    clearAddressFields();
                }
            } else {
                clearAddressFields();
            }
        });
        function clearAddressFields() {
            streetInput.value = '';
            neighborhoodInput.value = '';
            stateSelect.value = '';
            citySelect.innerHTML = '<option value="">Selecione a Cidade</option>';
            citySelect.disabled = true;
        }
        async function loadStates() {
            try {
                const response = await fetch('https://servicodados.ibge.gov.br/api/v1/localidades/estados?orderBy=nome');
                const states = await response.json();
                stateSelect.innerHTML = '<option value="">Selecione o Estado</option>';
                states.forEach(state => {
                    const option = document.createElement('option');
                    option.value = state.sigla;
                    option.textContent = state.nome;
                    stateSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Erro ao carregar estados:', error);
                showAlert('Erro', 'Erro ao carregar estados.');
            }
        }
        async function loadCitiesByState(stateSigla) {
            citySelect.innerHTML = '<option value="">Carregando Cidades...</option>';
            citySelect.disabled = true;
            try {
                const response = await fetch(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${stateSigla}/municipios?orderBy=nome`);
                const cities = await response.json();
                citySelect.innerHTML = '<option value="">Selecione a Cidade</option>';
                cities.forEach(city => {
                    const option = document.createElement('option');
                    option.value = city.nome;
                    option.textContent = city.nome;
                    citySelect.appendChild(option);
                });
                citySelect.disabled = false;
            } catch (error) {
                console.error('Erro ao carregar cidades:', error);
                showAlert('Erro', 'Erro ao carregar Cidades');
                citySelect.innerHTML = '<option value="">Erro ao carregar Cidades</option>';
            }
        }
        stateSelect.addEventListener('change', (e) => {
            const selectedState = e.target.value;
            if (selectedState) {
                loadCitiesByState(selectedState);
            } else {
                citySelect.innerHTML = '<option value="">Selecione a Cidade</option>';
                citySelect.disabled = true;
            }
        });
        documentUploadInput.addEventListener('change', () => {
            if (documentUploadInput.files.length > 0) {
                documentUploadLabel.querySelector('span').textContent = documentUploadInput.files[0].name;
                documentUploadLabel.classList.add('uploaded');
            } else {
                documentUploadLabel.querySelector('span').textContent = 'Anexar Documento';
                documentUploadLabel.classList.remove('uploaded');
            }
        });
        professionalPhotoUploadInput.addEventListener('change', () => {
            if (professionalPhotoUploadInput.files.length > 0) {
                professionalPhotoUploadLabel.querySelector('span').textContent = professionalPhotoUploadInput.files[0].name;
                professionalPhotoUploadLabel.classList.add('uploaded');
            } else {
                professionalPhotoUploadLabel.querySelector('span').textContent = 'Anexar Foto Profissional';
                professionalPhotoUploadLabel.classList.remove('uploaded');
            }
        });
        let isRegisterMode = false;
        const ADMIN_EMAIL = "edw.rocha.psi@gmail.com";
        function toggleRegistrationFields(show) {
            registrationFields.style.display = show ? 'block' : 'none';
            userTypeSelection.style.display = show ? 'block' : 'none';
            const emailLabel = emailInputGroup.querySelector('label');
            emailLabel.textContent = show ? 'E-mail' : 'E-mail';
            if (!show) {
                caregiverFields.style.display = 'none';
            } else {
                const selectedType = document.querySelector('.user-type-btn.active').dataset.type;
                if (selectedType === 'caregiver') {
                    caregiverFields.style.display = 'block';
                    corenNumberGroup.style.display = hasCoren ? 'block' : 'none';
                }
            }
        }
        loginBtn.addEventListener('click', () => {
            formToggle.classList.remove('register-active');
            loginBtn.classList.add('active');
            registerBtn.classList.remove('active');
            authActionBtn.textContent = 'Entrar na Plataforma';
            isRegisterMode = false;
            toggleRegistrationFields(false);
            authMessage.textContent = '';
            authMessage.classList.remove('loading-message');
        });
        registerBtn.addEventListener('click', () => {
            formToggle.classList.add('register-active');
            registerBtn.classList.add('active');
            loginBtn.classList.remove('active');
            authActionBtn.textContent = 'Criar Conta';
            isRegisterMode = true;
            toggleRegistrationFields(true);
            authMessage.textContent = '';
            authMessage.classList.remove('loading-message');
            loadStates();
        });
        userTypeBtns.forEach(btn => {
            btn.addEventListener('click', function() {
                userTypeBtns.forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                currentUserType = this.dataset.type;
                if (isRegisterMode) {
                    if (currentUserType === 'caregiver') {
                        caregiverFields.style.display = 'block';
                        corenNumberGroup.style.display = hasCoren ? 'block' : 'none';
                    } else {
                        caregiverFields.style.display = 'none';
                    }
                } else {
                    caregiverFields.style.display = 'none';
                }
            });
        });
        corenYesBtn.addEventListener('click', () => {
            corenYesBtn.classList.add('active');
            corenNoBtn.classList.remove('active');
            hasCoren = true;
            corenInput.value = '';
            corenNumberGroup.style.display = 'block';
        });
        corenNoBtn.addEventListener('click', () => {
            corenNoBtn.classList.add('active');
            corenYesBtn.classList.remove('active');
            hasCoren = false;
            corenInput.value = 'Não possui COREN';
            corenNumberGroup.style.display = 'none';
        });
        authActionBtn.addEventListener('click', async () => {
            authMessage.textContent = '';
            authMessage.classList.remove('loading-message');
            const email = emailInput.value;
            const password = passwordInput.value;
            let selectedUserType = document.querySelector('.user-type-btn.active')?.dataset.type;
            if (isRegisterMode) {
                const confirmPassword = confirmPasswordInput.value;
                const fullName = fullNameInput.value;
                const dobDisplay = dobInput.value;
                const dobISO = formatDateToISO(dobDisplay);
                const cpf = cpfInput.value;
                const phone = phoneInput.value;
                const cep = cepInput.value;
                const state = stateSelect.value;
                const city = citySelect.value;
                const neighborhood = neighborhoodInput.value;
                const street = streetInput.value;
                const number = numberInput.value;
                const religion = religionSelect.value;
                const termsAccepted = termsConsentCheckbox.checked;
                if (!fullName || !dobDisplay || !cpf || !phone || !cep || !state || !city || !neighborhood || !street || !number || !password || !confirmPassword || !religion) {
                    showAlert('Campos Obrigatórios', 'Por favor, preencha todos os campos obrigatórios.');
                    return;
                }
                if (password !== confirmPassword) {
                    showAlert('Erro de Senha', 'As senhas não coincidem.');
                    return;
                }
                if (!termsAccepted) {
                    showAlert('Termos de Uso', 'Você deve concordar com os Termos de Uso.');
                    return;
                }
                if (selectedUserType === 'caregiver') {
                    if (hasCoren && !corenInput.value) {
                        showAlert('Registro COREN', 'Por favor, insira o número COREN.');
                        return;
                    }
                    if (!documentUploadInput.files[0]) {
                        showAlert('Documento Necessário', 'Por favor, faça upload do documento de identificação.');
                        return;
                    }
                    if (!professionalPhotoUploadInput.files[0]) {
                        showAlert('Foto Necessária', 'Por favor, faça upload da foto profissional.');
                        return;
                    }
                }
                try {
                    let documentUrl = null;
                    let professionalPhotoUrl = null;
                    if (selectedUserType === 'caregiver') {
                        authMessage.textContent = 'Fazendo upload de documentos... Isso pode levar alguns segundos.';
                        authMessage.classList.add('loading-message');
                        try {
                            documentUrl = await uploadImageToImgur(documentUploadInput.files[0]);
                            professionalPhotoUrl = await uploadImageToImgur(professionalPhotoUploadInput.files[0]);
                        } catch (uploadError) {
                            showAlert('Erro no Upload', `Erro no upload: ${uploadError.message}. Por favor, tente novamente.`);
                            authMessage.textContent = '';
                            authMessage.classList.remove('loading-message');
                            console.error("Erro durante o upload de documentos:", uploadError);
                            return;
                        }
                        if (!documentUrl || !professionalPhotoUrl) {
                            showAlert('Erro no Upload', "Falha no upload de um ou mais documentos. Por favor, tente novamente.");
                            authMessage.textContent = '';
                            authMessage.classList.remove('loading-message');
                            return;
                        }
                    }
                    let authEmail = email;
                    if (selectedUserType === 'client' && !email) {
                        authEmail = `${cpf.replace(/\D/g, '')}@vitaintegrare.com`;
                    }
                    authMessage.textContent = 'Criando sua conta...';
                    authMessage.classList.add('loading-message');
                    const userCredential = await auth.createUserWithEmailAndPassword(authEmail, password);
                    const user = userCredential.user;
                    const userData = {
                        uid: user.uid,
                        type: selectedUserType,
                        fullName: fullName,
                        dob: dobISO,
                        cpf: cpf,
                        phone: phone,
                        email: email || null,
                        cep: cep,
                        city: city,
                        state: state,
                        neighborhood: neighborhood,
                        street: street,
                        number: number,
                        religion: religion,
                        createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                        profilePhotoUrl: professionalPhotoUrl || null
                    };
                    if (selectedUserType === 'caregiver') {
                        userData.coren = hasCoren ? corenInput.value : null;
                        userData.documentUrl = documentUrl;
                        userData.rating = 3.0;
                        userData.bio = '';
                        userData.education = '';
                        userData.courses = '';
                        userData.experience = '';
                        userData.availability = '';
                        userData.additionalInfo = '';
                        userData.status = 'pending';
                    } else {
                        userData.medications = [];
                        userData.recommendations = '';
                    }
                    await db.collection('users').doc(user.uid).set(userData);
                    authMessage.textContent = 'Cadastro realizado com sucesso! Redirecionando...';
                    authMessage.classList.remove('loading-message');
                    await new Promise(resolve => setTimeout(resolve, 1500));
                    handleAuthSuccess(user, selectedUserType);
                } catch (error) {
                    console.error("Erro no cadastro:", error);
                    authMessage.textContent = '';
                    authMessage.classList.remove('loading-message');
                    let errorMessage = 'Erro no cadastro. Por favor, tente novamente.';
                    if (error.code === 'auth/email-already-in-use') {
                        errorMessage = 'Este e-mail já está em uso. Por favor, use outro ou faça login.';
                    } else if (error.code === 'auth/invalid-email') {
                        errorMessage = 'O formato do e-mail é inválido.';
                    } else if (error.code === 'auth/weak-password') {
                        errorMessage = 'A senha deve ter pelo menos 6 caracteres.';
                    } else {
                        errorMessage = `Erro no cadastro: ${error.message}`;
                    }
                    showAlert('Erro no Cadastro', errorMessage);
                }
            } else {
                if (!email || !password) {
                    showAlert('Campos Obrigatórios', 'Por favor, insira seu e-mail e senha.');
                    return;
                }
                authMessage.textContent = 'Entrando...';
                authMessage.classList.add('loading-message');
                try {
                    const userCredential = await auth.signInWithEmailAndPassword(email, password);
                    const user = userCredential.user;
                    const userDoc = await db.collection('users').doc(user.uid).get();
                    if (!userDoc.exists) {
                        await auth.signOut();
                        throw new Error("Dados do usuário não encontrados. Por favor, tente se cadastrar novamente ou entre em contato com o suporte.");
                    }
                    const userData = userDoc.data();
                    authMessage.textContent = 'Login bem-sucedido! Redirecionando...';
                    authMessage.classList.remove('loading-message');
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    handleAuthSuccess(user, userData.type);
                } catch (error) {
                    console.error("Erro no login:", error);
                    authMessage.textContent = '';
                    authMessage.classList.remove('loading-message');
                    let errorMessage = 'Erro no login. Verifique seu e-mail e senha.';
                    if (error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password' || error.code === 'auth/invalid-login-credentials') {
                        errorMessage = 'Usuário ou senha incorretos.';
                    } else if (error.code === 'auth/invalid-email') {
                        errorMessage = 'O formato do e-mail é inválido.';
                    } else {
                        errorMessage = `Erro no login: ${error.message}`;
                    }
                    showAlert('Erro no Login', errorMessage);
                }
            }
        });
        async function handleAuthSuccess(user, type) {
            currentUser = user;
            currentUserType = type;
            screenHistory = [];
            if (user.email === ADMIN_EMAIL) {
                currentUserType = 'admin';
                loadAdminDashboard();
            } else if (type === 'caregiver') {
                setupCaregiverRealtimeListener(user.uid);
            } else {
                setupClientRealtimeListener(user.uid);
            }
        }
        function setupCaregiverRealtimeListener(uid) {
            if (unsubscribeCaregiverData) unsubscribeCaregiverData();
            unsubscribeCaregiverData = db.collection('users').doc(uid).onSnapshot(doc => {
                if (doc.exists) {
                    currentCaregiverData = doc.data();
                    loadCaregiverDashboardUI();
                } else {
                    console.error("Caregiver data not found for UID:", uid);
                    showAlert('Erro', "Erro: Dados do cuidador não encontrados.");
                    auth.signOut();
                }
            }, error => {
                console.error("Error listening to caregiver data:", error);
                showAlert('Erro', `Erro ao carregar dados do cuidador: ${error.message}`);
                auth.signOut();
            });
        }
        function setupClientRealtimeListener(uid) {
            if (unsubscribeClientData) unsubscribeClientData();
            unsubscribeClientData = db.collection('users').doc(uid).onSnapshot(doc => {
                if (doc.exists) {
                    currentClientData = doc.data();
                    loadClientDashboardUI();
                } else {
                    console.error("Client data not found for UID:", uid);
                    showAlert('Erro', "Erro: Dados do cliente não encontrados.");
                    auth.signOut();
                }
            }, error => {
                console.error("Error listening to client data:", error);
                showAlert('Erro', `Erro ao carregar dados do cliente: ${error.message}`);
                auth.signOut();
            });
        }
        async function loadAdminDashboard() {
            showScreen('adminScreen');
            setupAdminPendingCaregiversListener();
            setupAdminAllUsersListener();
            setupAdminCharts();
        }
        adminLogoutBtn.addEventListener('click', () => {
            auth.signOut();
        });
        function setupAdminPendingCaregiversListener() {
            if (unsubscribeAdminPendingCaregivers) {
                unsubscribeAdminPendingCaregivers();
            }
            unsubscribeAdminPendingCaregivers = db.collection('users')
                .where('type', '==', 'caregiver')
                .where('status', '==', 'pending')
                .onSnapshot(snapshot => {
                    pendingCaregivers = snapshot.docs.map(doc => ({
                        id: doc.id,
                        ...doc.data()
                    }));
                    currentPendingCaregiverPage = 0;
                    renderPendingCaregiversPage();
                }, error => {
                    console.error("Error listening to pending caregivers:", error);
                    showAlert('Erro', 'Erro ao carregar cuidadores pendentes.');
                });
        }
        function renderPendingCaregiversPage() {
            pendingCaregiversList.innerHTML = '';
            const startIndex = currentPendingCaregiverPage * ADMIN_USERS_PER_PAGE;
            const endIndex = startIndex + ADMIN_USERS_PER_PAGE;
            const caregiversToDisplay = pendingCaregivers.slice(startIndex, endIndex);
            if (caregiversToDisplay.length === 0) {
                pendingCaregiversList.innerHTML = '<p style="text-align: center; color: var(--medium-gray);">Nenhum cuidador pendente de aprovação.</p>';
            } else {
                caregiversToDisplay.forEach(caregiver => {
                    const listItem = document.createElement('li');
                    listItem.className = 'admin-list-item';
                    listItem.innerHTML = `
                        <div class="item-details"><strong>Nome:</strong> ${caregiver.fullName}</div>
                        <div class="item-details"><strong>E-mail:</strong> ${caregiver.email || 'N/A'}</div>
                        <div class="item-details"><strong>CPF:</strong> ${caregiver.cpf}</div>
                        <div class="item-details"><strong>Telefone:</strong> ${caregiver.phone || 'N/A'}</div>
                        <div class="item-details"><strong>COREN:</strong> ${caregiver.coren || 'Não possui'}</div>
                        <div class="item-actions">
                            <button class="btn-approve" data-id="${caregiver.id}" data-name="${caregiver.fullName}">Aprovar</button>
                            <button class="btn-reject" data-id="${caregiver.id}" data-name="${caregiver.fullName}">Rejeitar</button>
                            <button class="btn-view-docs" data-id="${caregiver.id}" data-type="caregiver"><i class="fas fa-images"></i></button>
                        </div>
                    `;
                    pendingCaregiversList.appendChild(listItem);
                });
            }
            updatePendingCaregiverPaginationButtons();
        }
        function updatePendingCaregiverPaginationButtons() {
            prevPendingCaregiverPageBtn.disabled = currentPendingCaregiverPage === 0;
            nextPendingCaregiverPageBtn.disabled = (currentPendingCaregiverPage + 1) * ADMIN_USERS_PER_PAGE >= pendingCaregivers.length;
        }
        prevPendingCaregiverPageBtn.addEventListener('click', () => {
            if (currentPendingCaregiverPage > 0) {
                currentPendingCaregiverPage--;
                renderPendingCaregiversPage();
            }
        });
        nextPendingCaregiverPageBtn.addEventListener('click', () => {
            if ((currentPendingCaregiverPage + 1) * ADMIN_USERS_PER_PAGE < pendingCaregivers.length) {
                currentPendingCaregiverPage++;
                renderPendingCaregiversPage();
            }
        });
        pendingCaregiversList.addEventListener('click', async (e) => {
            const target = e.target;
            const button = target.closest('button');
            if (!button) return;
            const caregiverId = button.dataset.id;
            const caregiverName = button.dataset.name;
            const userType = button.dataset.type;
            if (button.classList.contains('btn-approve')) {
                const confirmed = await showConfirm('Aprovar Cuidador', `Tem certeza que deseja aprovar ${caregiverName}?`);
                if (confirmed) {
                    await updateCaregiverStatus(caregiverId, 'approved', caregiverName);
                }
            } else if (button.classList.contains('btn-reject')) {
                const confirmed = await showConfirm('Rejeitar Cuidador', `Tem certeza que deseja rejeitar ${caregiverName}?`);
                if (confirmed) {
                    await updateCaregiverStatus(caregiverId, 'rejected', caregiverName);
                }
            } else if (button.classList.contains('btn-view-docs')) {
                showAdminUserDetails(caregiverId, userType);
            }
        });
        async function updateCaregiverStatus(caregiverId, status, caregiverName) {
            try {
                await db.collection('users').doc(caregiverId).update({
                    status: status
                });
                let message = '';
                if (status === 'approved') {
                    message = `Parabéns! Sua conta Vita Integrare foi APROVADA por nossa equipe! Agora você pode acessar todos os módulos e aparecerá para os clientes.`;
                    showAlert('Sucesso', `${caregiverName} foi aprovado(a)!`);
                } else if (status === 'rejected') {
                    message = `Sua conta Vita Integrare foi REJEITADA. Por favor, entre em contato com o suporte para mais informações.`;
                    showAlert('Sucesso', `${caregiverName} foi rejeitado(a).`);
                } else if (status === 'payment_pending') {
                    message = `Seu perfil Vita Integrare está com o pagamento pendente. Por favor, entre em contato com edw.rocha.psi@gmail.com para regularizar e ter seu perfil visível novamente.`;
                    showAlert('Sucesso', `${caregiverName} agora está com status de Pagamento Pendente.`);
                }
            } catch (error) {
                console.error(`Error updating caregiver status to ${status}:`, error);
                showAlert('Erro', `Erro ao ${status === 'approved' ? 'aprovar' : 'rejeitar'} cuidador: ${error.message}`);
            }
        }
        adminUserManagementModule.addEventListener('click', () => {
            renderAdminUserList();
        });
        showCaregiversBtn.addEventListener('click', () => {
            currentAdminUserTypeFilter = 'caregiver';
            showCaregiversBtn.classList.add('active');
            showClientsBtn.classList.remove('active');
            currentAdminUserPage = 0;
            renderAdminUserList();
        });
        showClientsBtn.addEventListener('click', () => {
            currentAdminUserTypeFilter = 'client';
            showClientsBtn.classList.add('active');
            showCaregiversBtn.classList.remove('active');
            currentAdminUserPage = 0;
            renderAdminUserList();
        });
        adminUserSearchInput.addEventListener('input', () => {
            adminUserSearchQuery = adminUserSearchInput.value.toLowerCase();
            currentAdminUserPage = 0;
            renderAdminUserList();
        });
        function setupAdminAllUsersListener() {
            if (unsubscribeAdminAllUsers) {
                unsubscribeAdminAllUsers();
            }
            unsubscribeAdminAllUsers = db.collection('users').onSnapshot(snapshot => {
                allUsers = snapshot.docs.map(doc => ({
                    id: doc.id,
                    ...doc.data()
                }));
                renderAdminUserList();
            }, error => {
                console.error("Error listening to all users:", error);
                showAlert('Erro', 'Erro ao carregar lista de usuários.');
            });
        }
        function renderAdminUserList() {
            adminUserListContainer.innerHTML = '';
            let filteredUsers = allUsers.filter(user => user.type === currentAdminUserTypeFilter);
            if (adminUserSearchQuery) {
                filteredUsers = filteredUsers.filter(user =>
                    user.fullName.toLowerCase().includes(adminUserSearchQuery) ||
                    (user.email && user.email.toLowerCase().includes(adminUserSearchQuery)) ||
                    (user.cpf && user.cpf.includes(adminUserSearchQuery.replace(/\D/g, '')))
                );
            }
            const startIndex = currentAdminUserPage * ADMIN_USERS_PER_PAGE;
            const endIndex = startIndex + ADMIN_USERS_PER_PAGE;
            const usersToDisplay = filteredUsers.slice(startIndex, endIndex);
            if (usersToDisplay.length === 0) {
                adminUserListContainer.innerHTML = `<p style="text-align: center; color: var(--medium-gray);">Nenhum ${currentAdminUserTypeFilter === 'caregiver' ? 'cuidador' : 'cliente'} encontrado.</p>`;
            } else {
                usersToDisplay.forEach(user => {
                    const item = document.createElement('div');
                    item.className = 'admin-user-item';
                    item.dataset.userId = user.id;
                    item.dataset.userType = user.type;
                    item.innerHTML = `
                        <div class="avatar">
                            ${user.profilePhotoUrl ? `<img src="${user.profilePhotoUrl}" alt="Foto">` : `<i class="fas fa-user${user.type === 'caregiver' ? '-nurse' : ''}"></i>`}
                        </div>
                        <div class="user-info-text">
                            <strong>${user.fullName}</strong>
                            <span>${user.email || user.cpf}</span>
                        </div>
                    `;
                    item.addEventListener('click', () => showAdminUserDetails(user.id, user.type));
                    adminUserListContainer.appendChild(item);
                });
            }
            updateAdminUserPaginationButtons(filteredUsers.length);
        }
        function updateAdminUserPaginationButtons(totalUsers) {
            prevUserPageBtn.disabled = currentAdminUserPage === 0;
            nextUserPageBtn.disabled = (currentAdminUserPage + 1) * ADMIN_USERS_PER_PAGE >= totalUsers;
        }
        prevUserPageBtn.addEventListener('click', () => {
            if (currentAdminUserPage > 0) {
                currentAdminUserPage--;
                renderAdminUserList();
            }
        });
        nextUserPageBtn.addEventListener('click', () => {
            const filteredUsers = allUsers.filter(user => user.type === currentAdminUserTypeFilter);
            if ((currentAdminUserPage + 1) * ADMIN_USERS_PER_PAGE < filteredUsers.length) {
                currentAdminUserPage++;
                renderAdminUserList();
            }
        });
        let currentEditingUser = null;
        async function showAdminUserDetails(userId, userType) {
            try {
                const userDoc = await db.collection('users').doc(userId).get();
                if (!userDoc.exists) {
                    showAlert('Erro', 'Usuário não encontrado.');
                    return;
                }
                currentEditingUser = {
                    id: userDoc.id,
                    ...userDoc.data()
                };
                adminUserDetailsTitle.textContent = `Detalhes de ${currentEditingUser.fullName}`;
                adminEditFullName.value = currentEditingUser.fullName || '';
                adminEditEmail.value = currentEditingUser.email || '';
                adminEditPhone.value = currentEditingUser.phone || '';
                adminEditCpf.value = currentEditingUser.cpf || '';
                adminEditReligion.value = currentEditingUser.religion || '';
                adminEditAddress.value = `${currentEditingUser.street || ''}, ${currentEditingUser.number || ''}, ${currentEditingUser.neighborhood || ''}, ${currentEditingUser.city || ''} - ${currentEditingUser.state || ''}`;
                adminCaregiverStatusGroup.style.display = 'none';
                adminCaregiverRatingGroup.style.display = 'none';
                adminCaregiverBioSection.style.display = 'none';
                adminClientMedicationsSection.style.display = 'none';
                adminCaregiverDocumentsSection.style.display = 'none';
                adminCaregiverProfilePhotoPreview.style.display = 'none';
                adminCaregiverProfilePhotoPreview.src = '';
                adminCaregiverProfilePhotoText.style.display = 'block';
                adminCaregiverDocumentPreview.style.display = 'none';
                adminCaregiverDocumentPreview.src = '';
                adminCaregiverDocumentLink.style.display = 'none';
                adminCaregiverDocumentLink.href = '#';
                adminCaregiverDocumentText.style.display = 'block';
                if (userType === 'caregiver') {
                    adminCaregiverStatusGroup.style.display = 'block';
                    if (!Array.from(adminEditStatus.options).some(option => option.value === 'payment_pending')) {
                        const option = document.createElement('option');
                        option.value = 'payment_pending';
                        option.textContent = 'Pagamento Pendente';
                        adminEditStatus.appendChild(option);
                    }
                    adminEditStatus.value = currentEditingUser.status || 'pending';
                    adminCaregiverRatingGroup.style.display = 'block';
                    adminEditRating.value = currentEditingUser.rating || 3.0;
                    displayStars(currentEditingUser.rating || 3.0, adminEditRatingStars);
                    adminCaregiverBioSection.style.display = 'block';
                    adminEditBio.value = currentEditingUser.bio || '';
                    adminCaregiverDocumentsSection.style.display = 'block';
                    if (currentEditingUser.profilePhotoUrl) {
                        adminCaregiverProfilePhotoPreview.src = currentEditingUser.profilePhotoUrl;
                        adminCaregiverProfilePhotoPreview.style.display = 'block';
                        adminCaregiverProfilePhotoText.style.display = 'none';
                    }
                    if (currentEditingUser.documentUrl) {
                        const isImage = /\.(jpeg|jpg|gif|png)$/i.test(currentEditingUser.documentUrl);
                        if (isImage) {
                            adminCaregiverDocumentPreview.src = currentEditingUser.documentUrl;
                            adminCaregiverDocumentPreview.style.display = 'block';
                            adminCaregiverDocumentText.style.display = 'none';
                        } else {
                            adminCaregiverDocumentLink.href = currentEditingUser.documentUrl;
                            adminCaregiverDocumentLink.textContent = 'Ver Documento Completo';
                            adminCaregiverDocumentLink.style.display = 'inline-block';
                            adminCaregiverDocumentText.style.display = 'none';
                        }
                    }
                } else if (userType === 'client') {
                    adminClientMedicationsSection.style.display = 'block';
                    renderAdminEditMedications(currentEditingUser.medications || []);
                }
                adminUserDetailsOverlay.classList.add('show');
            } catch (error) {
                console.error("Error showing admin user details:", error);
                showAlert('Erro', `Erro ao carregar detalhes do usuário: ${error.message}`);
            }
        }
        closeAdminUserDetailsPopupBtn.addEventListener('click', () => {
            adminUserDetailsOverlay.classList.remove('show');
            currentEditingUser = null;
        });
        adminEditRating.addEventListener('input', (e) => {
            const rating = parseFloat(e.target.value);
            if (!isNaN(rating)) {
                displayStars(rating, adminEditRatingStars);
            } else {
                adminEditRatingStars.innerHTML = '';
            }
        });
        function renderAdminEditMedications(medications) {
            adminEditMedicationsList.innerHTML = '';
            if (!Array.isArray(medications) || medications.length === 0) {
                adminEditMedicationsList.innerHTML = '<p style="color: var(--medium-gray);">Nenhuma medicação registrada.</p>';
                return;
            }
            medications.forEach((med, index) => {
                const medItem = document.createElement('div');
                medItem.className = 'medication-item';
                medItem.innerHTML = `
                    <div class="input-group">
                        <label>Nome:</label>
                        <input type="text" class="medication-name" value="${med.name || ''}" placeholder="Nome da medicação">
                    </div>
                    <div class="input-group">
                        <label>Dose:</label>
                        <input type="text" class="medication-dose" value="${med.dose || ''}" placeholder="Ex: 500mg">
                    </div>
                    <div class="input-group">
                        <label>Posologia:</label>
                        <input type="text" class="medication-posology" value="${med.posology || ''}" placeholder="Ex: 1x ao dia, a cada 8h">
                    </div>
                `;
                adminEditMedicationsList.appendChild(medItem);
            });
        }
        adminSaveUserDetailsBtn.addEventListener('click', async () => {
            if (!currentEditingUser) return;
            const updatedData = {
                fullName: adminEditFullName.value,
                phone: adminEditPhone.value,
                religion: adminEditReligion.value,
            };
            if (currentEditingUser.type === 'caregiver') {
                updatedData.status = adminEditStatus.value;
                updatedData.rating = parseFloat(adminEditRating.value) || 0;
                updatedData.bio = adminEditBio.value;
            } else if (currentEditingUser.type === 'client') {
                const updatedMedications = [];
                adminEditMedicationsList.querySelectorAll('.medication-item').forEach(item => {
                    const name = item.querySelector('.medication-name').value;
                    const dose = item.querySelector('.medication-dose').value;
                    const posology = item.querySelector('.medication-posology').value;
                    if (name || dose || posology) {
                        updatedMedications.push({
                            name,
                            dose,
                            posology
                        });
                    }
                });
                updatedData.medications = updatedMedications;
            }
            try {
                await db.collection('users').doc(currentEditingUser.id).update(updatedData);
                showAlert('Sucesso', 'Informações do usuário atualizadas!');
                adminUserDetailsOverlay.classList.remove('show');
                currentEditingUser = null;
            } catch (error) {
                console.error("Error saving user details:", error);
                showAlert('Erro', `Erro ao salvar detalhes do usuário: ${error.message}`);
            }
        });
        function setupAdminCharts() {
            if (appointmentStatusChart) appointmentStatusChart.destroy();
            if (appointmentsPerMonthChart) appointmentsPerMonthChart.destroy();
            db.collection('appointments').get().then(snapshot => {
                const appointments = snapshot.docs.map(doc => doc.data());
                const statusCounts = appointments.reduce((acc, app) => {
                    acc[app.status] = (acc[app.status] || 0) + 1;
                    return acc;
                }, {});
                const statusLabels = {
                    'pending': 'Pendentes',
                    'confirmed': 'Confirmados',
                    'cancelled': 'Cancelados',
                    'completed': 'Concluídos',
                    'refused': 'Recusados'
                };
                const statusData = Object.keys(statusLabels).map(key => statusCounts[key] || 0);
                const statusBackgroundColors = [
                    'rgba(255, 206, 86, 0.6)',
                    'rgba(75, 192, 192, 0.6)',
                    'rgba(255, 99, 132, 0.6)',
                    'rgba(54, 162, 235, 0.6)',
                    'rgba(153, 102, 255, 0.6)'
                ];
                const statusBorderColors = [
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(153, 102, 255, 1)'
                ];
                appointmentStatusChart = new Chart(appointmentStatusChartCtx, {
                    type: 'pie',
                    data: {
                        labels: Object.values(statusLabels),
                        datasets: [{
                            data: statusData,
                            backgroundColor: statusBackgroundColors,
                            borderColor: statusBorderColors,
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'top',
                            },
                            title: {
                                display: false,
                                text: 'Status dos Agendamentos'
                            }
                        }
                    }
                });
                const monthlyCounts = {};
                appointments.filter(app => app.status === 'confirmed').forEach(app => {
                    const date = new Date(app.startDate);
                    const monthYear = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
                    monthlyCounts[monthYear] = (monthlyCounts[monthYear] || 0) + 1;
                });
                const sortedMonths = Object.keys(monthlyCounts).sort();
                const monthlyData = sortedMonths.map(month => monthlyCounts[month]);
                appointmentsPerMonthChart = new Chart(appointmentsPerMonthChartCtx, {
                    type: 'bar',
                    data: {
                        labels: sortedMonths,
                        datasets: [{
                            label: 'Agendamentos Confirmados',
                            data: monthlyData,
                            backgroundColor: 'rgba(54, 162, 235, 0.6)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                display: false,
                            },
                            title: {
                                display: false,
                                text: 'Agendamentos Confirmados por Mês'
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    precision: 0
                                }
                            }
                        }
                    }
                });
            }).catch(error => {
                console.error("Error fetching data for charts:", error);
                showAlert('Erro', 'Erro ao carregar dados para os gráficos.');
            });
        }
        async function loadCaregiverDashboardUI() {
            if (!currentCaregiverData) return;
            caregiverNameDisplay.textContent = currentCaregiverData.fullName;
            if (currentCaregiverData.profilePhotoUrl) {
                caregiverAvatar.innerHTML = `<img src="${currentCaregiverData.profilePhotoUrl}" alt="Foto de Perfil">`;
            } else {
                caregiverAvatar.innerHTML = '<i class="fas fa-user-nurse"></i>';
            }
            displayStars(currentCaregiverData.rating || 3.0, caregiverStars);
            caregiverRatingValue.textContent = (currentCaregiverData.rating || 3.0).toFixed(1);
            const isApproved = currentCaregiverData.status === 'approved';
            const isPending = currentCaregiverData.status === 'pending';
            const isRejected = currentCaregiverData.status === 'rejected';
            const isPaymentPending = currentCaregiverData.status === 'payment_pending';
            if (isPending) {
                caregiverWelcomeMessage.innerHTML = `
                    Sua conta está <strong>PENDENTE DE APROVAÇÃO</strong> pela nossa equipe!
                    Enquanto isso, alguns módulos estão desabilitados e você não aparecerá para clientes.
                    Aguarde a notificação de aprovação!
                `;
            } else if (isRejected) {
                caregiverWelcomeMessage.innerHTML = `
                    Sua conta foi <strong>REJEITADA</strong>. Por favor, entre em contato com o suporte para mais informações.
                `;
            } else if (isPaymentPending) {
                caregiverWelcomeMessage.innerHTML = `
                    Seu perfil está com <strong>PAGAMENTO PENDENTE</strong>. Todos os módulos estão desabilitados e seu perfil não será mostrado para clientes.
                    Por favor, entre em contato com <a href="mailto:edw.rocha.psi@gmail.com">edw.rocha.psi@gmail.com</a> para regularizar.
                `;
            } else {
                caregiverWelcomeMessage.innerHTML = `
                    Mantenha seu perfil sempre atualizado para conseguir melhores avaliações e mais pacientes!
                `;
            }
            const modulesToControl = [
                {
                    element: caregiverProfileModule,
                    alwaysEnabled: false
                },
                {
                    element: caregiverPatientsModule,
                    alwaysEnabled: false
                },
                {
                    element: caregiverPatientHistoryModule,
                    alwaysEnabled: false
                },
                {
                    element: caregiverEducaModule,
                    alwaysEnabled: true,
                    isComingSoon: true
                }
            ];
            modulesToControl.forEach(module => {
                if (module.isComingSoon) {
                    module.element.classList.add('disabled-module');
                    module.element.style.pointerEvents = 'none';
                } else {
                    if (isApproved) {
                        module.element.classList.remove('disabled-module');
                        module.element.style.pointerEvents = 'auto';
                    } else {
                        module.element.classList.add('disabled-module');
                        module.element.style.pointerEvents = 'none';
                    }
                }
            });
            showScreen('caregiverScreen');
            setupCaregiverAppointmentsListener(currentUser.uid);
        }
        function setupCaregiverAppointmentsListener(caregiverId) {
            if (unsubscribeAppointments) {
                unsubscribeAppointments();
            }
            unsubscribeAppointments = db.collection('appointments')
                .where('caregiverId', '==', caregiverId)
                .onSnapshot(snapshot => {
                    currentAppointments = [];
                    snapshot.forEach(doc => {
                        const appointment = doc.data();
                        appointment.id = doc.id;
                        currentAppointments.push(appointment);
                    });
                    displayCaregiverPatients();
                }, error => {
                    console.error("Error listening to appointments:", error);
                    showAlert('Erro', 'Erro ao carregar agendamentos em tempo real.');
                });
        }
        function displayCaregiverPatients() {
            caregiverPatientList.innerHTML = '';
            caregiverPatientHistoryList.innerHTML = '';
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const activeAppointments = [];
            const historyAppointments = [];
            currentAppointments.forEach(app => {
                const endDate = new Date(app.endDate + 'T00:00:00');
                endDate.setHours(0, 0, 0, 0);
                if ((app.status === 'pending' || app.status === 'confirmed') && endDate >= today) {
                    activeAppointments.push(app);
                } else if (app.status === 'completed' || app.status === 'cancelled' || app.status === 'refused' || (app.status === 'confirmed' && endDate < today)) {
                    historyAppointments.push(app);
                }
            });
            const sortAppointments = (a, b) => {
                if (a.requestedAt && b.requestedAt) {
                    return b.requestedAt.toDate() - a.requestedAt.toDate();
                }
                return 0;
            };
            if (activeAppointments.length > 0) {
                const activeCategory = document.createElement('div');
                activeCategory.className = 'appointment-category';
                activeCategory.innerHTML = `<div class="category-title">Agendamentos Ativos</div>`;
                activeAppointments.sort(sortAppointments).forEach(app => {
                    const item = document.createElement('div');
                    item.className = 'appointment-item';
                    const daysText = app.daysOfWeek ? app.daysOfWeek.join(', ') : 'Não informado';
                    const timeText = app.startTime && app.endTime ? `${app.startTime} - ${app.endTime}` : 'Não informado';
                    let statusClass = '';
                    let statusText = '';
                    if (app.status === 'pending') {
                        statusClass = 'status-pending';
                        statusText = 'Pendente';
                    } else if (app.status === 'confirmed') {
                        statusClass = 'status-confirmed';
                        statusText = 'Confirmado';
                    }
                    item.innerHTML = `
                        <div class="patient-name">${app.clientName}</div>
                        <div class="appointment-time">Período: ${formatDateToDisplay(app.startDate)} a ${formatDateToDisplay(app.endDate)}</div>
                        <div class="appointment-time">Dias: ${daysText}</div>
                        <div class="appointment-time">Horário: ${timeText}</div>
                        <div class="appointment-status ${statusClass}">${statusText}</div>
                    `;
                    item.dataset.appointmentId = app.id;
                    item.addEventListener('click', () => showPatientDetails(app.id));
                    activeCategory.appendChild(item);
                });
                caregiverPatientList.appendChild(activeCategory);
            } else {
                caregiverPatientList.innerHTML = `<p style="text-align: center; color: var(--medium-gray);">Nenhum agendamento ativo.</p>`;
            }
            if (historyAppointments.length > 0) {
                const historyCategory = document.createElement('div');
                historyCategory.className = 'appointment-category';
                historyCategory.innerHTML = `<div class="category-title">Histórico de Pacientes</div>`;
                const uniqueClients = {};
                historyAppointments.forEach(app => {
                    if (!uniqueClients[app.clientId]) {
                        uniqueClients[app.clientId] = {
                            clientId: app.clientId,
                            clientName: app.clientName,
                            lastAppointmentDate: app.requestedAt ? app.requestedAt.toDate() : new Date(0),
                            appointments: []
                        };
                    }
                    uniqueClients[app.clientId].appointments.push(app);
                    if (app.requestedAt && app.requestedAt.toDate() > uniqueClients[app.clientId].lastAppointmentDate) {
                        uniqueClients[app.clientId].lastAppointmentDate = app.requestedAt.toDate();
                    }
                });
                const sortedClients = Object.values(uniqueClients).sort((a, b) => {
                    return b.lastAppointmentDate - a.lastAppointmentDate;
                });
                sortedClients.forEach(client => {
                    const item = document.createElement('div');
                    item.className = 'appointment-item';
                    item.innerHTML = `
                        <div class="patient-name">${client.clientName}</div>
                        <div class="appointment-time">Última interação: ${formatDateToDisplay(client.lastAppointmentDate.toISOString().split('T')[0])}</div>
                        <div class="appointment-status status-completed">Histórico</div>
                    `;
                    item.dataset.clientId = client.clientId;
                    item.addEventListener('click', () => showPatientHistoryDetails(client.clientId));
                    historyCategory.appendChild(item);
                });
                caregiverPatientHistoryList.appendChild(historyCategory);
            } else {
                caregiverPatientHistoryList.innerHTML = `<p style="text-align: center; color: var(--medium-gray);">Nenhum paciente no histórico.</p>`;
            }
        }
        caregiverProfileModule.addEventListener('click', () => {
            if (currentCaregiverData.status === 'approved') {
                loadCaregiverProfileForEdit();
                showScreen('caregiverProfileEditScreen');
            } else {
                showAlert('Acesso Negado', 'Seu perfil está pendente de aprovação, foi rejeitado ou está com pagamento pendente. Você não pode editar seu perfil no momento.');
            }
        });
        caregiverPatientsModule.addEventListener('click', () => {
            if (currentCaregiverData.status !== 'approved') {
                showAlert('Acesso Negado', 'Este módulo está desabilitado enquanto sua conta está pendente de aprovação, foi rejeitada ou está com pagamento pendente.');
                return;
            }
        });
        caregiverPatientHistoryModule.addEventListener('click', () => {
            if (currentCaregiverData.status !== 'approved') {
                showAlert('Acesso Negado', 'Este módulo está desabilitado enquanto sua conta está pendente de aprovação, foi rejeitada ou está com pagamento pendente.');
                return;
            }
        });
        async function loadCaregiverProfileForEdit() {
            if (!currentCaregiverData) return;
            displayFullName.textContent = currentCaregiverData.fullName || 'N/A';
            displayCPF.textContent = currentCaregiverData.cpf || 'N/A';
            displayPhoneCaregiver.textContent = currentCaregiverData.phone || 'N/A';
            displayCOREN.textContent = currentCaregiverData.coren || 'Não possui';
            displayReligionCaregiver.textContent = currentCaregiverData.religion || 'Não informado';
            displayLocation.textContent = `${currentCaregiverData.city || ''}, ${currentCaregiverData.neighborhood || ''}, ${currentCaregiverData.street || ''}, ${currentCaregiverData.number || ''}, ${currentCaregiverData.state || ''}`;
            displayDOB.textContent = formatDateToDisplay(currentCaregiverData.dob) || 'N/A';
            editBio.value = currentCaregiverData.bio || '';
            editEducation.value = currentCaregiverData.education || '';
            editCourses.value = currentCaregiverData.courses || '';
            editExperience.value = currentCaregiverData.experience || '';
            editAvailability.value = currentCaregiverData.availability || '';
            editAdditionalInfo.value = currentCaregiverData.additionalInfo || '';
            if (currentCaregiverData.profilePhotoUrl) {
                profilePhotoPreview.src = currentCaregiverData.profilePhotoUrl;
                profilePhotoPreview.style.display = 'block';
                profilePhotoIcon.style.display = 'none';
            } else {
                profilePhotoPreview.style.display = 'none';
                profilePhotoIcon.style.display = 'block';
            }
        }
        profilePhotoPreview.addEventListener('click', () => {
            showPhotoOptions(profilePhotoPreview.src, 'caregiver');
        });
        profilePhotoIcon.addEventListener('click', () => {
            showPhotoOptions(null, 'caregiver');
        });
        saveCaregiverProfileBtn.addEventListener('click', async () => {
            if (!currentUser || currentUserType !== 'caregiver') return;
            const updatedData = {
                bio: editBio.value,
                education: editEducation.value,
                courses: editCourses.value,
                experience: editExperience.value,
                availability: editAvailability.value,
                additionalInfo: editAdditionalInfo.value,
            };
            try {
                await db.collection('users').doc(currentUser.uid).update(updatedData);
                showAlert('Sucesso', 'Perfil atualizado com sucesso!');
                setTimeout(() => {
                    goBack();
                }, 1500);
            } catch (error) {
                console.error("Error saving caregiver profile:", error);
                showAlert('Erro', `Erro ao salvar perfil: ${error.message}`);
            }
        });
        async function showPatientDetails(appointmentId) {
            try {
                const appointmentDoc = await db.collection('appointments').doc(appointmentId).get();
                if (!appointmentDoc.exists) {
                    showAlert('Erro', 'Agendamento não encontrado.');
                    return;
                }
                currentSelectedAppointment = {
                    id: appointmentDoc.id,
                    ...appointmentDoc.data()
                };
                const clientDoc = await db.collection('users').doc(currentSelectedAppointment.clientId).get();
                if (!clientDoc.exists) {
                    showAlert('Erro', 'Dados do cliente não encontrados.');
                    return;
                }
                const clientData = clientDoc.data();
                currentSelectedAppointment.clientData = clientData;
                patientDetailsName.textContent = clientData.fullName;
                patientFullName.textContent = clientData.fullName;
                const dobDate = new Date(clientData.dob);
                const today = new Date();
                let age = today.getFullYear() - dobDate.getFullYear();
                const m = today.getMonth() - dobDate.getMonth();
                if (m < 0 || (m === 0 && today.getDate() < dobDate.getDate())) {
                    age--;
                }
                patientAge.textContent = `${age} anos`;
                patientReligion.textContent = clientData.religion || 'Não informado';
                patientAddress.textContent = `${clientData.street || ''}, ${clientData.number || ''}, ${clientData.neighborhood || ''}, ${clientData.city || ''} - ${clientData.state || ''}`;
                const daysText = currentSelectedAppointment.daysOfWeek ? currentSelectedAppointment.daysOfWeek.join(', ') : 'Não informado';
                const timeText = currentSelectedAppointment.startTime && currentSelectedAppointment.endTime ? `${currentSelectedAppointment.startTime} - ${currentSelectedAppointment.endTime}` : 'Não informado';
                patientScheduledTime.innerHTML = `
                    Período: ${formatDateToDisplay(currentSelectedAppointment.startDate)} a ${formatDateToDisplay(currentSelectedAppointment.endDate)}<br>
                    Dias: ${daysText}<br>
                    Horário: ${timeText}
                `;
                patientObservation.textContent = currentSelectedAppointment.observation || 'Nenhuma observação.';
                patientRoutines.value = currentSelectedAppointment.patientNotes?.routines || '';
                patientSpecificCare.value = currentSelectedAppointment.patientNotes?.specificCare || '';
                patientDailyRecord.value = currentSelectedAppointment.patientNotes?.dailyRecord || '';
                renderCaregiverPatientMedications(clientData.medications || []);
                const canEditMedications = currentSelectedAppointment.status === 'pending' || currentSelectedAppointment.status === 'confirmed';
                addCaregiverPatientMedicationBtn.style.display = canEditMedications ? 'block' : 'none';
                caregiverPatientMedicationsList.querySelectorAll('input, button.remove-medication-btn').forEach(el => {
                    el.disabled = !canEditMedications;
                });
                confirmAppointmentBtn.style.display = currentSelectedAppointment.status === 'pending' ? 'block' : 'none';
                completeAppointmentBtn.style.display = currentSelectedAppointment.status === 'confirmed' ? 'block' : 'none';
                cancelAppointmentBtn.style.display = (currentSelectedAppointment.status === 'pending' || currentSelectedAppointment.status === 'confirmed') ? 'block' : 'none';
                refuseAppointmentBtn.style.display = currentSelectedAppointment.status === 'pending' ? 'block' : 'none';
                showScreen('caregiverPatientDetailsScreen');
            } catch (error) {
                console.error("Error showing patient details:", error);
                showAlert('Erro', `Erro ao carregar detalhes do paciente: ${error.message}`);
            }
        }
        function renderCaregiverPatientMedications(medications) {
            caregiverPatientMedicationsList.innerHTML = '';
            if (!Array.isArray(medications) || medications.length === 0) {
                caregiverPatientMedicationsList.innerHTML = '<p style="color: var(--medium-gray);">Nenhuma medicação registrada.</p>';
                return;
            }
            medications.forEach((med, index) => {
                const medItem = document.createElement('div');
                medItem.className = 'medication-item';
                medItem.innerHTML = `
                    <div class="input-group">
                        <label>Nome:</label>
                        <input type="text" class="medication-name" value="${med.name || ''}" placeholder="Nome da medicação">
                    </div>
                    <div class="input-group">
                        <label>Dose:</label>
                        <input type="text" class="medication-dose" value="${med.dose || ''}" placeholder="Ex: 500mg">
                    </div>
                    <div class="input-group">
                        <label>Posologia:</label>
                        <input type="text" class="medication-posology" value="${med.posology || ''}" placeholder="Ex: 1x ao dia, a cada 8h">
                    </div>
                    <button type="button" class="remove-medication-btn" data-index="${index}"><i class="fas fa-times-circle"></i></button>
                `;
                caregiverPatientMedicationsList.appendChild(medItem);
            });
            caregiverPatientMedicationsList.querySelectorAll('.remove-medication-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    const indexToRemove = parseInt(e.target.closest('.remove-medication-btn').dataset.index);
                    let currentMeds = currentSelectedAppointment.clientData.medications || [];
                    currentMeds.splice(indexToRemove, 1);
                    updateClientMedications(currentSelectedAppointment.clientId, currentMeds);
                });
            });
        }
        addCaregiverPatientMedicationBtn.addEventListener('click', () => {
            let currentMeds = currentSelectedAppointment.clientData.medications || [];
            currentMeds.push({
                name: '',
                dose: '',
                posology: ''
            });
            updateClientMedications(currentSelectedAppointment.clientId, currentMeds);
        });
        async function updateClientMedications(clientId, medications) {
            try {
                await db.collection('users').doc(clientId).update({
                    medications: medications
                });
                const clientDoc = await db.collection('users').doc(clientId).get();
                if (clientDoc.exists) {
                    currentSelectedAppointment.clientData = clientDoc.data();
                    renderCaregiverPatientMedications(clientDoc.data().medications || []);
                    showAlert('Sucesso', 'Medicações atualizadas!');
                }
            } catch (error) {
                console.error("Error updating client medications:", error);
                showAlert('Erro', `Erro ao atualizar medicações: ${error.message}`);
            }
        }
        caregiverPatientMedicationsList.addEventListener('input', (e) => {
            if (e.target.classList.contains('medication-name') ||
                e.target.classList.contains('medication-dose') ||
                e.target.classList.contains('medication-posology')) {
                const medItem = e.target.closest('.medication-item');
                const index = Array.from(caregiverPatientMedicationsList.children).indexOf(medItem);
                if (index !== -1 && currentSelectedAppointment && currentSelectedAppointment.clientData) {
                    let currentMeds = currentSelectedAppointment.clientData.medications || [];
                    if (currentMeds[index]) {
                        if (e.target.classList.contains('medication-name')) {
                            currentMeds[index].name = e.target.value;
                        } else if (e.target.classList.contains('medication-dose')) {
                            currentMeds[index].dose = e.target.value;
                        } else if (e.target.classList.contains('medication-posology')) {
                            currentMeds[index].posology = e.target.value;
                        }
                    }
                }
            }
        });
        savePatientNotesBtn.addEventListener('click', async () => {
            if (!currentSelectedAppointment) return;
            const updatedNotes = {
                routines: patientRoutines.value,
                specificCare: patientSpecificCare.value,
                dailyRecord: patientDailyRecord.value,
            };
            try {
                await db.collection('appointments').doc(currentSelectedAppointment.id).update({
                    patientNotes: updatedNotes
                });
                showAlert("Sucesso", "Notas do paciente salvas!");
            } catch (error) {
                console.error("Error saving patient notes:", error);
                showAlert('Erro', `Erro ao salvar notas: ${error.message}`);
            }
        });
        confirmAppointmentBtn.addEventListener('click', async () => {
            if (!currentSelectedAppointment) return;
            const confirmed = await showConfirm('Confirmar Atendimento', 'Deseja confirmar este agendamento?');
            if (confirmed) {
                try {
                    await db.collection('appointments').doc(currentSelectedAppointment.id).update({
                        status: 'confirmed'
                    });
                    const clientDoc = await db.collection('users').doc(currentSelectedAppointment.clientId).get();
                    const clientData = clientDoc.data();
                    const caregiverDoc = await db.collection('users').doc(currentSelectedAppointment.caregiverId).get();
                    const caregiverData = caregiverDoc.data();
                    showAppointmentSummaryPopup(currentSelectedAppointment, caregiverData, clientData, 'Agendamento Confirmado!');
                    showAlert('Sucesso', 'Agendamento confirmado!');
                    goBack();
                } catch (error) {
                    console.error("Error confirming appointment:", error);
                    showAlert('Erro', `Erro ao confirmar agendamento: ${error.message}`);
                }
            }
        });
        completeAppointmentBtn.addEventListener('click', async () => {
            if (!currentSelectedAppointment) return;
            const confirmed = await showConfirm('Concluir Atendimento', 'Deseja marcar este agendamento como concluído?');
            if (confirmed) {
                try {
                    await db.collection('appointments').doc(currentSelectedAppointment.id).update({
                        status: 'completed'
                    });
                    const clientDoc = await db.collection('users').doc(currentSelectedAppointment.clientId).get();
                    const clientData = clientDoc.data();
                    const caregiverDoc = await db.collection('users').doc(currentSelectedAppointment.caregiverId).get();
                    const caregiverData = caregiverDoc.data();
                    showAppointmentSummaryPopup(currentSelectedAppointment, caregiverData, clientData, 'Atendimento Concluído!');
                    showAlert('Sucesso', 'Agendamento concluído!');
                    goBack();
                } catch (error) {
                    console.error("Error completing appointment:", error);
                    showAlert('Erro', `Erro ao concluir agendamento: ${error.message}`);
                }
            }
        });
        cancelAppointmentBtn.addEventListener('click', async () => {
            if (!currentSelectedAppointment) return;
            const confirmed = await showConfirm('Cancelar Atendimento', 'Tem certeza que deseja cancelar este agendamento?');
            if (confirmed) {
                try {
                    await db.collection('appointments').doc(currentSelectedAppointment.id).update({
                        status: 'cancelled'
                    });
                    const clientDoc = await db.collection('users').doc(currentSelectedAppointment.clientId).get();
                    const clientData = clientDoc.data();
                    const caregiverDoc = await db.collection('users').doc(currentSelectedAppointment.caregiverId).get();
                    const caregiverData = caregiverDoc.data();
                    showAppointmentSummaryPopup(currentSelectedAppointment, caregiverData, clientData, 'Agendamento Cancelado!');
                    showAlert('Sucesso', 'Agendamento cancelado!');
                    goBack();
                } catch (error) {
                    console.error("Error cancelling appointment:", error);
                    showAlert('Erro', `Erro ao cancelar agendamento: ${error.message}`);
                }
            }
        });
        refuseAppointmentBtn.addEventListener('click', async () => {
            if (!currentSelectedAppointment) return;
            const confirmed = await showConfirm('Recusar Atendimento', 'Tem certeza que deseja recusar este pedido de agendamento?');
            if (confirmed) {
                try {
                    await db.collection('appointments').doc(currentSelectedAppointment.id).update({
                        status: 'refused'
                    });
                    const clientDoc = await db.collection('users').doc(currentSelectedAppointment.clientId).get();
                    const clientData = clientDoc.data();
                    const caregiverDoc = await db.collection('users').doc(currentSelectedAppointment.caregiverId).get();
                    const caregiverData = caregiverDoc.data();
                    showAppointmentSummaryPopup(currentSelectedAppointment, caregiverData, clientData, 'Pedido Recusado!');
                    showAlert('Sucesso', 'Pedido de agendamento recusado!');
                    goBack();
                } catch (error) {
                    console.error("Error refusing appointment:", error);
                    showAlert('Erro', `Erro ao recusar agendamento: ${error.message}`);
                }
            }
        });
        async function showPatientHistoryDetails(clientId) {
            try {
                const clientDoc = await db.collection('users').doc(clientId).get();
                if (!clientDoc.exists) {
                    showAlert('Erro', 'Dados do cliente não encontrados.');
                    return;
                }
                const clientData = clientDoc.data();
                historyPatientDetailsName.textContent = clientData.fullName;
                historyPatientFullName.textContent = clientData.fullName;
                const dobDate = new Date(clientData.dob);
                const today = new Date();
                let age = today.getFullYear() - dobDate.getFullYear();
                const m = today.getMonth() - dobDate.getMonth();
                if (m < 0 || (m === 0 && today.getDate() < dobDate.getDate())) {
                    age--;
                }
                historyPatientAge.textContent = `${age} anos`;
                historyPatientReligion.textContent = clientData.religion || 'Não informado';
                historyPatientAddress.textContent = `${clientData.street || ''}, ${clientData.number || ''}, ${clientData.neighborhood || ''}, ${clientData.city || ''} - ${clientData.state || ''}`;
                renderHistoryPatientMedications(clientData.medications || []);
                const latestCompletedAppointmentSnapshot = await db.collection('appointments')
                    .where('clientId', '==', clientId)
                    .where('caregiverId', '==', currentUser.uid)
                    .where('status', '==', 'completed')
                    .orderBy('requestedAt', 'desc')
                    .limit(1)
                    .get();
                let latestNotes = {};
                if (!latestCompletedAppointmentSnapshot.empty) {
                    latestNotes = latestCompletedAppointmentSnapshot.docs[0].data().patientNotes || {};
                }
                historyPatientRoutines.value = latestNotes.routines || 'Nenhuma rotina registrada.';
                historyPatientSpecificCare.value = latestNotes.specificCare || 'Nenhum cuidado específico registrado.';
                historyPatientDailyRecord.value = latestNotes.dailyRecord || 'Nenhum registro diário.';
                showScreen('caregiverPatientHistoryDetailsScreen');
            } catch (error) {
                console.error("Error loading patient history details:", error);
                showAlert('Erro', `Erro ao carregar detalhes do histórico do paciente: ${error.message}`);
            }
        }
        function renderHistoryPatientMedications(medications) {
            historyPatientMedicationsList.innerHTML = '';
            if (!Array.isArray(medications) || medications.length === 0) {
                historyPatientMedicationsList.innerHTML = '<p style="color: var(--medium-gray);">Nenhuma medicação registrada.</p>';
                return;
            }
            medications.forEach(med => {
                const medItem = document.createElement('div');
                medItem.className = 'medication-item';
                medItem.innerHTML = `
                    <div class="medication-details">
                        <strong>Nome:</strong> <span>${med.name || 'N/A'}</span>
                    </div>
                    <div class="medication-details">
                        <strong>Dose:</strong> <span>${med.dose || 'N/A'}</span>
                    </div>
                    <div class="medication-details">
                        <strong>Posologia:</strong> <span>${med.posology || 'N/A'}</span>
                    </div>
                `;
                historyPatientMedicationsList.appendChild(medItem);
            });
        }
        async function loadClientDashboardUI() {
            if (!currentClientData) return;
            clientNameDisplay.textContent = currentClientData.fullName;
            if (currentClientData.profilePhotoUrl) {
                clientAvatar.innerHTML = `<img src="${currentClientData.profilePhotoUrl}" alt="Foto de Perfil">`;
            } else {
                clientAvatar.innerHTML = '<i class="fas fa-user"></i>';
            }
            showScreen('clientScreen');
            loadAllCaregivers();
            const clientModulesToControl = [];
            clientModulesToControl.forEach(module => {
                if (module.isComingSoon) {
                    module.element.classList.add('disabled-module');
                    module.element.style.pointerEvents = 'none';
                } else {
                    module.element.classList.remove('disabled-module');
                    module.element.style.pointerEvents = 'auto';
                }
            });
        }
        clientProfileModule.addEventListener('click', () => {
            loadClientProfileForEdit();
            showScreen('clientProfileEditScreen');
        });
        async function loadClientProfileForEdit() {
            if (!currentClientData) return;
            clientDisplayFullName.textContent = currentClientData.fullName || 'N/A';
            clientDisplayCPF.textContent = currentClientData.cpf || 'N/A';
            clientDisplayPhone.textContent = currentClientData.phone || 'N/A';
            clientDisplayEmail.textContent = currentClientData.email || 'N/A';
            clientDisplayReligion.textContent = currentClientData.religion || 'Não informado';
            clientDisplayAddress.textContent = `${currentClientData.street || ''}, ${currentClientData.number || ''}, ${currentClientData.neighborhood || ''}, ${currentClientData.city || ''} - ${currentClientData.state || ''}`;
            renderClientMedications(currentClientData.medications || []);
            editClientRecommendations.value = currentClientData.recommendations || '';
            if (currentClientData.profilePhotoUrl) {
                clientProfilePhotoPreview.src = currentClientData.profilePhotoUrl;
                clientProfilePhotoPreview.style.display = 'block';
                clientProfilePhotoIcon.style.display = 'none';
            } else {
                clientProfilePhotoPreview.style.display = 'none';
                clientProfilePhotoIcon.style.display = 'block';
            }
        }
        clientProfilePhotoPreview.addEventListener('click', () => {
            showPhotoOptions(clientProfilePhotoPreview.src, 'client');
        });
        clientProfilePhotoIcon.addEventListener('click', () => {
            showPhotoOptions(null, 'client');
        });
        function renderClientMedications(medications) {
            clientMedicationsList.innerHTML = '';
            if (!Array.isArray(medications)) {
                medications = [];
            }
            medications.forEach((med, index) => {
                const medItem = document.createElement('div');
                medItem.className = 'medication-item';
                medItem.innerHTML = `
                    <div class="input-group">
                        <label>Nome:</label>
                        <input type="text" class="medication-name" value="${med.name || ''}" placeholder="Nome da medicação">
                    </div>
                    <div class="input-group">
                        <label>Dose:</label>
                        <input type="text" class="medication-dose" value="${med.dose || ''}" placeholder="Ex: 500mg">
                    </div>
                    <div class="input-group">
                        <label>Posologia:</label>
                        <input type="text" class="medication-posology" value="${med.posology || ''}" placeholder="Ex: 1x ao dia, a cada 8h">
                    </div>
                    <button type="button" class="remove-medication-btn" data-index="${index}"><i class="fas fa-times-circle"></i></button>
                `;
                clientMedicationsList.appendChild(medItem);
            });
            clientMedicationsList.querySelectorAll('.remove-medication-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    const indexToRemove = parseInt(e.target.closest('.remove-medication-btn').dataset.index);
                    let currentMeds = currentClientData.medications || [];
                    currentMeds.splice(indexToRemove, 1);
                    currentClientData.medications = currentMeds;
                    renderClientMedications(currentMeds);
                });
            });
        }
        addClientMedicationBtn.addEventListener('click', () => {
            let currentMeds = currentClientData.medications || [];
            currentMeds.push({
                name: '',
                dose: '',
                posology: ''
            });
            currentClientData.medications = currentMeds;
            renderClientMedications(currentMeds);
        });
        saveClientProfileBtn.addEventListener('click', async () => {
            if (!currentUser || currentUserType !== 'client') return;
            const updatedMedications = [];
            clientMedicationsList.querySelectorAll('.medication-item').forEach(item => {
                const name = item.querySelector('.medication-name').value;
                const dose = item.querySelector('.medication-dose').value;
                const posology = item.querySelector('.medication-posology').value;
                if (name || dose || posology) {
                    updatedMedications.push({
                        name,
                        dose,
                        posology
                    });
                }
            });
            const updatedData = {
                medications: updatedMedications,
                recommendations: editClientRecommendations.value,
            };
            try {
                await db.collection('users').doc(currentUser.uid).update(updatedData);
                showAlert('Sucesso', 'Perfil atualizado com sucesso!');
                setTimeout(() => {
                    goBack();
                }, 1500);
            } catch (error) {
                console.error("Error saving client profile:", error);
                showAlert('Erro', `Erro ao salvar perfil: ${error.message}`);
            }
        });
        clientAppointmentsModule.addEventListener('click', () => {
        });
        async function loadAllCaregivers() {
            try {
                const caregiversSnapshot = await db.collection('users')
                    .where('type', '==', 'caregiver')
                    .where('status', '==', 'approved')
                    .onSnapshot(snapshot => {
                        allCaregivers = snapshot.docs.map(doc => ({
                            id: doc.id,
                            ...doc.data()
                        })).filter(caregiver => caregiver.email !== ADMIN_EMAIL);
                        applyCaregiverFilters();
                    }, error => {
                        console.error("Error listening to caregivers:", error);
                        caregiverCarousel.innerHTML = '<p style="text-align: center; color: var(--error);">Erro ao carregar cuidadores.</p>';
                    });
            } catch (error) {
                console.error("Error setting up caregiver listener:", error);
                caregiverCarousel.innerHTML = '<p style="text-align: center; color: var(--error);">Erro ao carregar cuidadores.</p>';
            }
        }
        function applyCaregiverFilters() {
            filteredCaregivers = allCaregivers.filter(caregiver => {
                const matchesReligion = caregiverFilterReligion === '' || caregiver.religion === caregiverFilterReligion;
                const matchesCity = caregiverFilterCity === '' || caregiver.city === caregiverFilterCity;
                const matchesRating = (caregiver.rating || 0) >= caregiverFilterRating;
                return matchesReligion && matchesCity && matchesRating;
            });
            currentCaregiverIndex = 0;
            renderCaregiverCarousel();
        }
        function getAbbreviatedName(fullName) {
            if (!fullName) return '';
            const parts = fullName.split(' ');
            if (parts.length <= 1) return fullName;
            return `${parts[0]} ${parts[parts.length - 1]}`;
        }
        function renderCaregiverCarousel() {
            caregiverCarousel.innerHTML = '';
            if (filteredCaregivers.length === 0) {
                caregiverCarousel.innerHTML = '<p style="text-align: center; color: var(--medium-gray); padding: 2rem;">Nenhum cuidador encontrado com os filtros aplicados.</p>';
                interestCaregiverBtn.style.display = 'none';
                prevCaregiverBtn.style.display = 'none';
                nextCaregiverBtn.style.display = 'none';
                return;
            }
            filteredCaregivers.forEach(caregiver => {
                const item = document.createElement('div');
                item.className = 'caregiver-carousel-item';
                item.innerHTML = `
                    <div class="caregiver-carousel-profile">
                        ${caregiver.profilePhotoUrl ? `<img src="${caregiver.profilePhotoUrl}" alt="Foto do Cuidador">` : '<i class="fas fa-user-nurse"></i>'}
                    </div>
                    <div class="caregiver-carousel-content">
                        <div class="caregiver-carousel-name">${getAbbreviatedName(caregiver.fullName)}</div>
                        <div class="caregiver-carousel-rating">
                            <div class="stars"></div>
                            <span>${(caregiver.rating || 3.0).toFixed(1)}</span>
                        </div>
                        <div class="caregiver-carousel-bio">
                            <p><strong>Experiência:</strong> ${caregiver.experience || 'Não informado'}</p>
                            <p><strong>Formação:</strong> ${caregiver.education || 'Não informado'}</p>
                            <p><strong>Religião:</strong> ${caregiver.religion || 'Não informado'}</p>
                            <p><strong>Disponibilidade:</strong> ${caregiver.availability || 'Não informado'}</p>
                            <p>${caregiver.bio || 'Sem biografia.'}</p>
                        </div>
                    </div>
                `;
                const starsElement = item.querySelector('.stars');
                displayStars(caregiver.rating || 3.0, starsElement);
                caregiverCarousel.appendChild(item);
            });
            updateCarousel();
            interestCaregiverBtn.style.display = 'block';
            prevCaregiverBtn.style.display = 'flex';
            nextCaregiverBtn.style.display = 'flex';
        }
        function updateCarousel() {
            if (filteredCaregivers.length === 0) {
                prevCaregiverBtn.disabled = true;
                nextCaregiverBtn.disabled = true;
                interestCaregiverBtn.style.display = 'none';
                return;
            }
            caregiverCarousel.style.transform = `translateX(-${currentCaregiverIndex * 100}%)`;
            prevCaregiverBtn.disabled = currentCaregiverIndex === 0;
            nextCaregiverBtn.disabled = currentCaregiverIndex === filteredCaregivers.length - 1;
            interestCaregiverBtn.style.display = 'block';
        }
        prevCaregiverBtn.addEventListener('click', () => {
            if (currentCaregiverIndex > 0) {
                currentCaregiverIndex--;
                updateCarousel();
            }
        });
        nextCaregiverBtn.addEventListener('click', () => {
            if (currentCaregiverIndex < filteredCaregivers.length - 1) {
                currentCaregiverIndex++;
                updateCarousel();
            }
        });
        let touchStartX = 0;
        let touchEndX = 0;
        const minSwipeDistance = 50;
        caregiverCarousel.addEventListener('touchstart', (e) => {
            touchStartX = e.touches[0].clientX;
        });
        caregiverCarousel.addEventListener('touchmove', (e) => {
            touchEndX = e.touches[0].clientX;
        });
        caregiverCarousel.addEventListener('touchend', () => {
            const swipeDistance = touchEndX - touchStartX;
            if (swipeDistance > minSwipeDistance && currentCaregiverIndex > 0) {
                currentCaregiverIndex--;
                updateCarousel();
            } else if (swipeDistance < -minSwipeDistance && currentCaregiverIndex < filteredCaregivers.length - 1) {
                currentCaregiverIndex++;
                updateCarousel();
            }
            touchStartX = 0;
            touchEndX = 0;
        });
        interestCaregiverBtn.addEventListener('click', () => {
            if (filteredCaregivers.length > 0) {
                selectedCaregiverForScheduling = filteredCaregivers[currentCaregiverIndex];
                populateScheduleCaregiverScreen();
                showScreen('scheduleCaregiverScreen');
            } else {
                showAlert('Nenhum Cuidador', "Nenhum cuidador selecionado.");
            }
        });
        function populateScheduleCaregiverScreen() {
            if (!selectedCaregiverForScheduling) return;
            selectedCaregiverName.textContent = selectedCaregiverForScheduling.fullName;
            selectedCaregiverRating.innerHTML = '';
            displayStars(selectedCaregiverForScheduling.rating || 3.0, selectedCaregiverRating);
            selectedCaregiverRating.innerHTML += ` <span>(${(selectedCaregiverForScheduling.rating || 3.0).toFixed(1)})</span>`;
            if (selectedCaregiverForScheduling.profilePhotoUrl) {
                selectedCaregiverAvatar.src = selectedCaregiverForScheduling.profilePhotoUrl;
                selectedCaregiverAvatar.style.display = 'block';
                selectedCaregiverIcon.style.display = 'none';
            } else {
                selectedCaregiverAvatar.style.display = 'none';
                selectedCaregiverIcon.style.display = 'block';
            }
            startDateInput.value = '';
            endDateInput.value = '';
            startTimeInput.value = '';
            endTimeInput.value = '';
            scheduleObservationInput.value = '';
            dayButtons.forEach(btn => btn.classList.remove('selected'));
            const today = new Date();
            const todayFormatted = String(today.getDate()).padStart(2, '0') + '/' + String(today.getMonth() + 1).padStart(2, '0') + '/' + today.getFullYear();
            startDateInput.placeholder = todayFormatted;
            endDateInput.placeholder = todayFormatted;
        }
        dayButtons.forEach(button => {
            button.addEventListener('click', () => {
                button.classList.toggle('selected');
            });
        });
        startDateInput.addEventListener('change', () => {
            const start = startDateInput.value;
            const end = endDateInput.value;
            if (start && end) {
                const [sDay, sMonth, sYear] = start.split('/').map(Number);
                const [eDay, eMonth, eYear] = end.split('/').map(Number);
                const startDateObj = new Date(sYear, sMonth - 1, sDay);
                const endDateObj = new Date(eYear, eMonth - 1, eDay);
                if (endDateObj < startDateObj) {
                    endDateInput.value = startDateInput.value;
                }
            }
        });
        confirmScheduleBtn.addEventListener('click', async () => {
            if (!selectedCaregiverForScheduling || !currentUser) {
                showAlert('Erro', "Cuidador ou cliente não selecionado.");
                return;
            }
            const startDateDisplay = startDateInput.value;
            const endDateDisplay = endDateInput.value;
            const selectedDays = Array.from(dayButtons)
                .filter(btn => btn.classList.contains('selected'))
                .map(btn => btn.dataset.day);
            const startTime = startTimeInput.value;
            const endTime = endTimeInput.value;
            const observation = scheduleObservationInput.value;
            if (!startDateDisplay || !endDateDisplay || selectedDays.length === 0 || !startTime || !endTime) {
                showAlert('Campos Obrigatórios', "Por favor, preencha todos os campos de agendamento (período, dias e horários).");
                return;
            }
            const startDate = formatDateToISO(startDateDisplay);
            const endDate = formatDateToISO(endDateDisplay);
            const [sDay, sMonth, sYear] = startDateDisplay.split('/').map(Number);
            const [eDay, eMonth, eYear] = endDateDisplay.split('/').map(Number);
            const startDateObj = new Date(sYear, sMonth - 1, sDay);
            const endDateObj = new Date(eYear, eMonth - 1, eDay);
            if (startDateObj > endDateObj) {
                showAlert('Erro de Data', "A data de término não pode ser anterior à data de início.");
                return;
            }
            if (startTime >= endTime) {
                showAlert('Erro de Horário', "O horário de início deve ser anterior ao horário de término.");
                return;
            }
            try {
                const conflictingAppointmentsSnapshot = await db.collection('appointments')
                    .where('caregiverId', '==', selectedCaregiverForScheduling.id)
                    .where('status', 'in', ['pending', 'confirmed'])
                    .get();
                const conflictingAppointments = conflictingAppointmentsSnapshot.docs.map(doc => doc.data());
                const isCaregiverBusy = conflictingAppointments.some(existingApp => {
                    const existingStartDate = new Date(existingApp.startDate + 'T00:00:00');
                    const existingEndDate = new Date(existingApp.endDate + 'T00:00:00');
                    const newStartDate = new Date(startDate + 'T00:00:00');
                    const newEndDate = new Date(endDate + 'T00:00:00');
                    const datesOverlap = (newStartDate <= existingEndDate && newEndDate >= existingStartDate);
                    if (datesOverlap) {
                        const daysOverlap = selectedDays.some(day => existingApp.daysOfWeek.includes(day));
                        if (daysOverlap) {
                            const newStartMinutes = parseInt(startTime.split(':')[0]) * 60 + parseInt(startTime.split(':')[1]);
                            const newEndMinutes = parseInt(endTime.split(':')[0]) * 60 + parseInt(endTime.split(':')[1]);
                            const existingStartMinutes = parseInt(existingApp.startTime.split(':')[0]) * 60 + parseInt(existingApp.startTime.split(':')[1]);
                            const existingEndMinutes = parseInt(existingApp.endTime.split(':')[0]) * 60 + parseInt(existingApp.endTime.split(':')[1]);
                            const timesOverlap = (newStartMinutes < existingEndMinutes && newEndMinutes > existingStartMinutes);
                            return timesOverlap;
                        }
                    }
                    return false;
                });
                if (isCaregiverBusy) {
                    showAlert('Cuidador Indisponível', 'O cuidador já possui um agendamento confirmado ou pendente para os dias e horários selecionados. Por favor, escolha outro horário ou cuidador.');
                    return;
                }
            } catch (error) {
                console.error("Erro ao verificar disponibilidade do cuidador:", error);
                showAlert('Erro', `Erro ao verificar disponibilidade: ${error.message}`);
                return;
            }
            const confirmed = await showConfirm('Confirmar Agendamento', `Deseja confirmar o agendamento com ${selectedCaregiverForScheduling.fullName} para o período de ${startDateDisplay} a ${endDateDisplay}, nos dias ${selectedDays.join(', ')} e horário de ${startTime} a ${endTime}?`);
            if (confirmed) {
                try {
                    const newAppointmentRef = await db.collection('appointments').add({
                        clientId: currentUser.uid,
                        clientName: currentClientData.fullName,
                        caregiverId: selectedCaregiverForScheduling.id,
                        caregiverName: selectedCaregiverForScheduling.fullName,
                        caregiverPhone: selectedCaregiverForScheduling.phone,
                        startDate: startDate,
                        endDate: endDate,
                        daysOfWeek: selectedDays,
                        startTime: startTime,
                        endTime: endTime,
                        observation: observation,
                        status: 'pending',
                        requestedAt: firebase.firestore.FieldValue.serverTimestamp(),
                        patientNotes: {}
                    });
                    showAlert('Sucesso', "Pedido de agendamento enviado! Aguarda aprovação do cuidador.");
                    goBack();
                } catch (error) {
                    console.error("Error sending appointment:", error);
                    showAlert('Erro', `Erro ao enviar agendamento: ${error.message}`);
                }
            }
        });
        clientRequestsHistoryModule.addEventListener('click', () => {
            currentRequestPage = 0;
            loadClientRequestsHistory();
            showScreen('clientRequestsHistoryScreen');
        });
        async function loadClientRequestsHistory() {
            if (!currentUser) return;
            try {
                const requestsSnapshot = await db.collection('appointments')
                    .where('clientId', '==', currentUser.uid)
                    .orderBy('requestedAt', 'desc')
                    .get();
                clientRequests = requestsSnapshot.docs.map(doc => ({
                    id: doc.id,
                    ...doc.data()
                }));
                renderClientRequestsPage();
            } catch (error) {
                console.error("Error loading client requests history:", error);
                showAlert('Erro', `Erro ao carregar histórico de solicitações: ${error.message}`);
            }
        }
        function renderClientRequestsPage() {
            clientRequestsList.innerHTML = '';
            const startIndex = currentRequestPage * REQUESTS_PER_PAGE;
            const endIndex = startIndex + REQUESTS_PER_PAGE;
            const requestsToDisplay = clientRequests.slice(startIndex, endIndex);
            if (requestsToDisplay.length === 0) {
                clientRequestsList.innerHTML = '<p style="text-align: center; color: var(--medium-gray);">Nenhuma solicitação encontrada.</p>';
            } else {
                requestsToDisplay.forEach(request => {
                    const item = document.createElement('div');
                    item.className = 'client-request-item';
                    let statusText = '';
                    let statusClass = '';
                    switch (request.status) {
                        case 'pending':
                            statusText = 'Pendente';
                            statusClass = 'status-pending';
                            break;
                        case 'confirmed':
                            statusText = 'Confirmado';
                            statusClass = 'status-confirmed';
                            break;
                        case 'cancelled':
                            statusText = 'Cancelado';
                            statusClass = 'status-cancelled';
                            break;
                        case 'completed':
                            statusText = 'Concluído';
                            statusClass = 'status-completed';
                            break;
                        case 'refused':
                            statusText = 'Recusado';
                            statusClass = 'status-refused';
                            break;
                        default:
                            statusText = 'Desconhecido';
                            statusClass = '';
                    }
                    const daysText = request.daysOfWeek ? request.daysOfWeek.join(', ') : 'Não informado';
                    const timeText = request.startTime && request.endTime ? `${request.startTime} - ${request.endTime}` : 'Não informado';
                    let whatsappLinkHtml = '';
                    if (request.status === 'confirmed' && request.caregiverPhone) {
                        const cleanedPhoneNumber = request.caregiverPhone.replace(/\D/g, '');
                        whatsappLinkHtml = `
                            <a href="https://wa.me/55${cleanedPhoneNumber}" target="_blank" class="whatsapp-link">
                                ${request.caregiverPhone} <i class="fab fa-whatsapp"></i>
                            </a>
                        `;
                    }
                    item.innerHTML = `
                        <div class="caregiver-name">${request.caregiverName}</div>
                        <div class="request-info">Período: ${formatDateToDisplay(request.startDate)} a ${formatDateToDisplay(request.endDate)}</div>
                        <div class="request-info">Dias: ${daysText}</div>
                        <div class="request-info">Horário: ${timeText}</div>
                        <div class="request-status ${statusClass}">${statusText}</div>
                        ${whatsappLinkHtml}
                    `;
                    item.dataset.requestId = request.id;
                    item.addEventListener('click', (e) => {
                        if (!e.target.closest('.whatsapp-link')) {
                            showClientRequestDetails(request.id);
                        }
                    });
                    clientRequestsList.appendChild(item);
                });
            }
            updateRequestPaginationButtons();
        }
        function updateRequestPaginationButtons() {
            prevRequestPageBtn.disabled = currentRequestPage === 0;
            nextRequestPageBtn.disabled = (currentRequestPage + 1) * REQUESTS_PER_PAGE >= clientRequests.length;
        }
        prevRequestPageBtn.addEventListener('click', () => {
            if (currentRequestPage > 0) {
                currentRequestPage--;
                renderClientRequestsPage();
            }
        });
        nextRequestPageBtn.addEventListener('click', () => {
            if ((currentRequestPage + 1) * REQUESTS_PER_PAGE < clientRequests.length) {
                currentRequestPage++;
                renderClientRequestsPage();
            }
        });
        async function showClientRequestDetails(requestId) {
            try {
                const requestDoc = await db.collection('appointments').doc(requestId).get();
                if (!requestDoc.exists) {
                    showAlert('Erro', 'Solicitação não encontrada.');
                    return;
                }
                const requestData = requestDoc.data();
                const caregiverDoc = await db.collection('users').doc(requestData.caregiverId).get();
                const caregiverData = caregiverDoc.exists ? caregiverDoc.data() : null;
                if (caregiverData) {
                    requestCaregiverName.textContent = caregiverData.fullName;
                    requestCaregiverRating.innerHTML = '';
                    displayStars(caregiverData.rating || 3.0, requestCaregiverRating);
                    requestCaregiverRating.innerHTML += ` <span>(${(caregiverData.rating || 3.0).toFixed(1)})</span>`;
                    if (caregiverData.profilePhotoUrl) {
                        requestCaregiverAvatar.src = caregiverData.profilePhotoUrl;
                        requestCaregiverAvatar.style.display = 'block';
                        requestCaregiverIcon.style.display = 'none';
                    } else {
                        requestCaregiverAvatar.style.display = 'none';
                        requestCaregiverIcon.style.display = 'block';
                    }
                    requestCaregiverBio.textContent = caregiverData.bio || 'Nenhuma biografia disponível.';
                } else {
                    requestCaregiverName.textContent = 'Cuidador Removido';
                    requestCaregiverRating.innerHTML = '';
                    requestCaregiverAvatar.style.display = 'none';
                    requestCaregiverIcon.style.display = 'block';
                    requestCaregiverBio.textContent = 'Informações do cuidador não disponíveis.';
                }
                let statusText = '';
                switch (requestData.status) {
                    case 'pending':
                        statusText = 'Pendente';
                        break;
                    case 'confirmed':
                        statusText = 'Confirmado';
                        break;
                    case 'cancelled':
                        statusText = 'Cancelado';
                        break;
                    case 'completed':
                        statusText = 'Concluído';
                        break;
                    case 'refused':
                        statusText = 'Recusado';
                        break;
                    default:
                        statusText = 'Desconhecido';
                }
                requestStatus.textContent = statusText;
                requestPeriod.textContent = `${formatDateToDisplay(requestData.startDate)} a ${formatDateToDisplay(requestData.endDate)}`;
                requestDays.textContent = requestData.daysOfWeek ? requestData.daysOfWeek.join(', ') : 'Não informado';
                requestTime.textContent = requestData.startTime && requestData.endTime ? `${requestData.startTime} - ${requestData.endTime}` : 'Não informado';
                requestObservation.textContent = requestData.observation || 'Nenhuma observação.';
                if (requestData.status === 'confirmed' || requestData.status === 'completed') {
                    const notes = requestData.patientNotes;
                    let notesContent = '';
                    if (notes) {
                        if (notes.routines) notesContent += `<strong>Rotinas e Hábitos:</strong> ${notes.routines}<br>`;
                        if (notes.specificCare) notesContent += `<strong>Cuidados Específicos:</strong> ${notes.specificCare}<br>`;
                        if (notes.dailyRecord) notesContent += `<strong>Registro Diário:</strong> ${notes.dailyRecord}<br>`;
                    }
                    requestCaregiverNotes.innerHTML = notesContent || 'Nenhuma nota do cuidador disponível ainda.';
                } else {
                    requestCaregiverNotes.innerHTML = 'Notas do cuidador estarão disponíveis após a confirmação ou conclusão do agendamento.';
                }
                showScreen('clientRequestDetailsScreen');
            } catch (error) {
                console.error("Error showing client request details:", error);
                showAlert('Erro', `Erro ao carregar detalhes da solicitação: ${error.message}`);
            }
        }
        async function showAppointmentSummaryPopup(appointment, caregiverData, clientData, title) {
            summaryTitle.textContent = title;
            summaryCaregiverName.textContent = caregiverData.fullName;
            summaryClientName.textContent = clientData.fullName;
            summaryLocation.textContent = `${clientData.city}, ${clientData.state}`;
            summaryPeriod.textContent = `${formatDateToDisplay(appointment.startDate)} a ${formatDateToDisplay(appointment.endDate)}`;
            summaryDays.textContent = appointment.daysOfWeek ? appointment.daysOfWeek.join(', ') : 'Não informado';
            summaryTime.textContent = appointment.startTime && appointment.endTime ? `${appointment.startTime} - ${appointment.endTime}` : 'Não informado';
            if (currentUserType === 'client') {
                if (caregiverData.profilePhotoUrl) {
                    summaryUserPhoto.src = caregiverData.profilePhotoUrl;
                    summaryUserPhoto.style.display = 'block';
                } else {
                    summaryUserPhoto.style.display = 'none';
                }
                if (clientData.profilePhotoUrl) {
                    summaryOtherPhoto.src = clientData.profilePhotoUrl;
                    summaryOtherPhoto.style.display = 'block';
                } else {
                    summaryOtherPhoto.style.display = 'none';
                }
                if (caregiverData.phone) {
                    const cleanedPhoneNumber = caregiverData.phone.replace(/\D/g, '');
                    summaryWhatsappBtn.href = `https://wa.me/55${cleanedPhoneNumber}?text=Olá%20${caregiverData.fullName},%20meu%20nome%20é%20${clientData.fullName}%20e%20gostaria%20de%20conversar%20sobre%20o%20agendamento%20confirmado.`;
                    summaryWhatsappBtn.style.display = 'inline-flex';
                    summaryDisclaimer.style.display = 'block';
                } else {
                    summaryWhatsappBtn.style.display = 'none';
                    summaryDisclaimer.style.display = 'none';
                }
            } else if (currentUserType === 'caregiver') {
                if (clientData.profilePhotoUrl) {
                    summaryUserPhoto.src = clientData.profilePhotoUrl;
                    summaryUserPhoto.style.display = 'block';
                } else {
                    summaryUserPhoto.style.display = 'none';
                }
                if (caregiverData.profilePhotoUrl) {
                    summaryOtherPhoto.src = caregiverData.profilePhotoUrl;
                    summaryOtherPhoto.style.display = 'block';
                } else {
                    summaryOtherPhoto.style.display = 'none';
                }
                if (clientData.phone) {
                    const cleanedPhoneNumber = clientData.phone.replace(/\D/g, '');
                    summaryWhatsappBtn.href = `https://wa.me/55${cleanedPhoneNumber}?text=Olá%20${clientData.fullName},%20meu%20nome%20é%20${caregiverData.fullName}%20e%20gostaria%20de%20conversar%20sobre%20o%20agendamento%20confirmado.`;
                    summaryWhatsappBtn.style.display = 'inline-flex';
                    summaryDisclaimer.style.display = 'block';
                } else {
                    summaryWhatsappBtn.style.display = 'none';
                    summaryDisclaimer.style.display = 'none';
                }
            }
            appointmentSummaryOverlay.classList.add('show');
        }
        summaryOkBtn.addEventListener('click', () => {
            appointmentSummaryOverlay.classList.remove('show');
        });
        let currentPhotoTarget = null;
        function showPhotoOptions(currentPhotoUrl, targetType) {
            currentPhotoTarget = targetType;
            if (currentPhotoUrl && currentPhotoUrl !== '') {
                viewPhotoBtn.style.display = 'block';
                viewPhotoBtn.onclick = () => {
                    photoViewImage.src = currentPhotoUrl;
                    photoViewOverlay.classList.add('show');
                    photoOptionsOverlay.classList.remove('show');
                };
            } else {
                viewPhotoBtn.style.display = 'none';
            }
            photoOptionsOverlay.classList.add('show');
        }
        closePhotoOptionsPopup.addEventListener('click', () => {
            photoOptionsOverlay.classList.remove('show');
        });
        closePhotoViewPopup.addEventListener('click', () => {
            photoViewOverlay.classList.remove('show');
            photoViewImage.src = '';
        });
        editPhotoBtn.addEventListener('click', () => {
            photoUploadInput.click();
        });
        photoUploadInput.addEventListener('change', async (e) => {
            const file = e.target.files[0];
            if (file) {
                photoOptionsOverlay.classList.remove('show');
                showAlert('Upload de Foto', 'Fazendo upload da nova foto de perfil...');
                try {
                    const newPhotoUrl = await uploadImageToImgur(file);
                    if (newPhotoUrl) {
                        if (currentPhotoTarget === 'caregiver') {
                            await db.collection('users').doc(currentUser.uid).update({
                                profilePhotoUrl: newPhotoUrl
                            });
                            profilePhotoPreview.src = newPhotoUrl;
                            profilePhotoPreview.style.display = 'block';
                            profilePhotoIcon.style.display = 'none';
                        } else if (currentPhotoTarget === 'client') {
                            await db.collection('users').doc(currentUser.uid).update({
                                profilePhotoUrl: newPhotoUrl
                            });
                            clientProfilePhotoPreview.src = newPhotoUrl;
                            clientProfilePhotoPreview.style.display = 'block';
                            clientProfilePhotoIcon.style.display = 'none';
                        }
                        showAlert('Sucesso', 'Foto de perfil atualizada com sucesso!');
                    } else {
                        showAlert('Erro no Upload', 'Falha ao fazer upload da nova foto.');
                    }
                } catch (uploadError) {
                    showAlert('Erro no Upload', `Erro no upload da foto: ${uploadError.message}`);
                } finally {
                    photoUploadInput.value = '';
                }
            }
        });
        openCaregiverFilterPopupBtn.addEventListener('click', async () => {
            const uniqueCities = [...new Set(allCaregivers.map(c => c.city).filter(Boolean))].sort();
            filterCitySelect.innerHTML = '<option value="">Todas</option>';
            uniqueCities.forEach(city => {
                const option = document.createElement('option');
                option.value = city;
                option.textContent = city;
                filterCitySelect.appendChild(option);
            });
            filterReligionSelect.value = caregiverFilterReligion;
            filterCitySelect.value = caregiverFilterCity;
            filterRatingInput.value = caregiverFilterRating;
            caregiverFilterOverlay.classList.add('show');
        });
        closeCaregiverFilterPopupBtn.addEventListener('click', () => {
            caregiverFilterOverlay.classList.remove('show');
        });
        applyCaregiverFiltersBtn.addEventListener('click', () => {
            caregiverFilterReligion = filterReligionSelect.value;
            caregiverFilterCity = filterCitySelect.value;
            caregiverFilterRating = parseFloat(filterRatingInput.value) || 0;
            applyCaregiverFilters();
            caregiverFilterOverlay.classList.remove('show');
        });
        clearCaregiverFiltersBtn.addEventListener('click', () => {
            caregiverFilterReligion = '';
            caregiverFilterCity = '';
            caregiverFilterRating = 0;
            filterReligionSelect.value = '';
            filterCitySelect.value = '';
            filterRatingInput.value = 0;
            applyCaregiverFilters();
            caregiverFilterOverlay.classList.remove('show');
        });
        let startX = 0;
        let currentScreenIdOnTouch = '';
        appContainer.addEventListener('touchstart', (e) => {
            startX = e.touches[0].clientX;
            const currentScreen = document.querySelector('.app-container > div[style*="display: flex"]');
            if (currentScreen) {
                currentScreenIdOnTouch = currentScreen.id;
            }
        });
        appContainer.addEventListener('touchend', (e) => {
            const endX = e.changedTouches[0].clientX;
            const diffX = endX - startX;
            if (diffX > 70 && screenHistory.length > 0) {
                if (currentScreenIdOnTouch !== 'authScreen' && !customAlertOverlay.classList.contains('show') && !adminUserDetailsOverlay.classList.contains('show') && !appointmentSummaryOverlay.classList.contains('show') && !photoOptionsOverlay.classList.contains('show') && !photoViewOverlay.classList.contains('show') && !caregiverFilterOverlay.classList.contains('show')) {
                    goBack();
                }
            }
        });
        backupDataBtn.addEventListener('click', async () => {
            const confirmed = await showConfirm('Confirmar Backup', 'Deseja fazer backup de todos os dados de usuários e agendamentos?');
            if (!confirmed) return;
            try {
                showAlert('Backup', 'Iniciando backup dos dados...');
                const usersSnapshot = await db.collection('users').get();
                const appointmentsSnapshot = await db.collection('appointments').get();
                const usersData = usersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                const appointmentsData = appointmentsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                const backupData = {
                    users: usersData,
                    appointments: appointmentsData,
                    timestamp: new Date().toISOString()
                };
                const filename = `firestore_backup_${new Date().toISOString().replace(/[:.]/g, '-')}.json`;
                const blob = new Blob([JSON.stringify(backupData, null, 2)], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                showAlert('Sucesso', 'Backup concluído e arquivo baixado!');
            } catch (error) {
                console.error('Erro ao fazer backup:', error);
                showAlert('Erro', `Erro ao fazer backup: ${error.message}`);
            }
        });
        restoreDataBtn.addEventListener('click', () => {
            restoreFileInput.click();
        });
        restoreFileInput.addEventListener('change', async (event) => {
            const file = event.target.files[0];
            if (!file) {
                showAlert('Nenhum arquivo', 'Nenhum arquivo selecionado para restauração.');
                return;
            }
            const confirmed = await showConfirm('Confirmar Restauração', 'ATENÇÃO: A restauração irá APAGAR TODOS os dados atuais e substituí-los pelos dados do arquivo. Esta ação é irreversível. Deseja continuar?');
            if (!confirmed) {
                restoreFileInput.value = '';
                return;
            }
            const reader = new FileReader();
            reader.onload = async (e) => {
                try {
                    const data = JSON.parse(e.target.result);
                    if (!data.users || !data.appointments) {
                        showAlert('Erro', 'Arquivo JSON inválido. Ele deve conter as coleções "users" e "appointments".');
                        restoreFileInput.value = '';
                        return;
                    }
                    showAlert('Restauração', 'Iniciando restauração dos dados. Isso pode levar um tempo...');
                    await deleteAllCollectionData('users');
                    await deleteAllCollectionData('appointments');
                    await restoreCollectionData('users', data.users);
                    await restoreCollectionData('appointments', data.appointments);
                    showAlert('Sucesso', 'Restauração concluída! Os dados foram substituídos.');
                    restoreFileInput.value = '';
                    auth.signOut();
                } catch (error) {
                    console.error('Erro ao restaurar dados:', error);
                    showAlert('Erro', `Erro ao restaurar dados: ${error.message}`);
                    restoreFileInput.value = '';
                }
            };
            reader.readAsText(file);
        });
        async function deleteAllCollectionData(collectionName) {
            const collectionRef = db.collection(collectionName);
            const snapshot = await collectionRef.get();
            const batch = db.batch();
            snapshot.docs.forEach(doc => {
                batch.delete(doc.ref);
            });
            await batch.commit();
            console.log(`Coleção ${collectionName} limpa.`);
        }
        async function restoreCollectionData(collectionName, data) {
            const collectionRef = db.collection(collectionName);
            const batch = db.batch();
            data.forEach(item => {
                const docRef = collectionRef.doc(item.id);
                const { id, ...docData } = item;
                batch.set(docRef, docData);
            });
            await batch.commit();
            console.log(`Coleção ${collectionName} restaurada com ${data.length} documentos.`);
        }
        caregiverLogoutBtn.addEventListener('click', () => {
            auth.signOut();
        });
        clientLogoutBtn.addEventListener('click', () => {
            auth.signOut();
        });
        adminLogoutBtn.addEventListener('click', () => {
            auth.signOut();
        });
        auth.onAuthStateChanged(async (user) => {
            if (user) {
                try {
                    const userDoc = await db.collection('users').doc(user.uid).get();
                    if (userDoc.exists) { const userData = userDoc.data();
                        handleAuthSuccess(user, userData.type);
                    } else {
                        console.error("User  data not found for UID:", user.uid);
                        await auth.signOut();
                    }
                } catch (error) {
                    console.error("Error fetching user data:", error);
                    await auth.signOut();
                }
            } else {
                showScreen('authScreen');
            }
        });
    </script>
</body>
</html>
